
TracerM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020cc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002254  08002254  00012254  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800226c  0800226c  0001226c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002274  08002274  00012274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002278  08002278  00012278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  0800227c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00000314  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000320  20000320  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001e03c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000036c7  00000000  00000000  0003e078  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000a4d5  00000000  00000000  0004173f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d28  00000000  00000000  0004bc18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001158  00000000  00000000  0004c940  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000833c  00000000  00000000  0004da98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004c70  00000000  00000000  00055dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0005aa44  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000028e0  00000000  00000000  0005aac0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800223c 	.word	0x0800223c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800223c 	.word	0x0800223c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <HAL_InitTick+0x3c>)
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_InitTick+0x40>)
{
 80004de:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e0:	7818      	ldrb	r0, [r3, #0]
 80004e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004ea:	6810      	ldr	r0, [r2, #0]
 80004ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f0:	f000 f9d6 	bl	80008a0 <HAL_SYSTICK_Config>
 80004f4:	4604      	mov	r4, r0
 80004f6:	b958      	cbnz	r0, 8000510 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f8:	2d0f      	cmp	r5, #15
 80004fa:	d809      	bhi.n	8000510 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fc:	4602      	mov	r2, r0
 80004fe:	4629      	mov	r1, r5
 8000500:	f04f 30ff 	mov.w	r0, #4294967295
 8000504:	f000 f998 	bl	8000838 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <HAL_InitTick+0x44>)
 800050a:	4620      	mov	r0, r4
 800050c:	601d      	str	r5, [r3, #0]
 800050e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000510:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000512:	bd38      	pop	{r3, r4, r5, pc}
 8000514:	20000008 	.word	0x20000008
 8000518:	20000000 	.word	0x20000000
 800051c:	20000004 	.word	0x20000004

08000520 <HAL_Init>:
{
 8000520:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_Init+0x30>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800052a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000532:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800053a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f969 	bl	8000814 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ffc8 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 8000548:	f001 fb9e 	bl	8001c88 <HAL_MspInit>
}
 800054c:	2000      	movs	r0, #0
 800054e:	bd08      	pop	{r3, pc}
 8000550:	40023c00 	.word	0x40023c00

08000554 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <HAL_IncTick+0x10>)
 8000556:	4b04      	ldr	r3, [pc, #16]	; (8000568 <HAL_IncTick+0x14>)
 8000558:	6811      	ldr	r1, [r2, #0]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	440b      	add	r3, r1
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000028 	.word	0x20000028
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800056c:	4b01      	ldr	r3, [pc, #4]	; (8000574 <HAL_GetTick+0x8>)
 800056e:	6818      	ldr	r0, [r3, #0]
}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000028 	.word	0x20000028

08000578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000578:	b538      	push	{r3, r4, r5, lr}
 800057a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800057c:	f7ff fff6 	bl	800056c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000580:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000582:	bf1c      	itt	ne
 8000584:	4b05      	ldrne	r3, [pc, #20]	; (800059c <HAL_Delay+0x24>)
 8000586:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000588:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800058a:	bf18      	it	ne
 800058c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800058e:	f7ff ffed 	bl	800056c <HAL_GetTick>
 8000592:	1b40      	subs	r0, r0, r5
 8000594:	4284      	cmp	r4, r0
 8000596:	d8fa      	bhi.n	800058e <HAL_Delay+0x16>
  {
  }
}
 8000598:	bd38      	pop	{r3, r4, r5, pc}
 800059a:	bf00      	nop
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005a0:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005a2:	4604      	mov	r4, r0
 80005a4:	2800      	cmp	r0, #0
 80005a6:	f000 8099 	beq.w	80006dc <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80005aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80005ac:	b923      	cbnz	r3, 80005b8 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005ae:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005b4:	f001 f918 	bl	80017e8 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005ba:	06db      	lsls	r3, r3, #27
 80005bc:	f100 808c 	bmi.w	80006d8 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80005c6:	f023 0302 	bic.w	r3, r3, #2
 80005ca:	f043 0302 	orr.w	r3, r3, #2
 80005ce:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80005d0:	4b43      	ldr	r3, [pc, #268]	; (80006e0 <HAL_ADC_Init+0x140>)
 80005d2:	685a      	ldr	r2, [r3, #4]
 80005d4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80005d8:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80005da:	685a      	ldr	r2, [r3, #4]
 80005dc:	6861      	ldr	r1, [r4, #4]
 80005de:	430a      	orrs	r2, r1
 80005e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005e2:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005e4:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005e6:	685a      	ldr	r2, [r3, #4]
 80005e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80005ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005ee:	685a      	ldr	r2, [r3, #4]
 80005f0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80005f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005f6:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005f8:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005fa:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80005fe:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000600:	685a      	ldr	r2, [r3, #4]
 8000602:	430a      	orrs	r2, r1
 8000604:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000606:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000608:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800060a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800060e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000610:	689a      	ldr	r2, [r3, #8]
 8000612:	430a      	orrs	r2, r1
 8000614:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000616:	4933      	ldr	r1, [pc, #204]	; (80006e4 <HAL_ADC_Init+0x144>)
 8000618:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800061a:	428a      	cmp	r2, r1
 800061c:	d050      	beq.n	80006c0 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800061e:	6899      	ldr	r1, [r3, #8]
 8000620:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000624:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000626:	6899      	ldr	r1, [r3, #8]
 8000628:	430a      	orrs	r2, r1
 800062a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800062c:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800062e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000630:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000634:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000636:	689a      	ldr	r2, [r3, #8]
 8000638:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800063a:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800063c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800063e:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000640:	f022 0202 	bic.w	r2, r2, #2
 8000644:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000646:	689a      	ldr	r2, [r3, #8]
 8000648:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800064c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800064e:	6a22      	ldr	r2, [r4, #32]
 8000650:	2a00      	cmp	r2, #0
 8000652:	d03d      	beq.n	80006d0 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000654:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000656:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000658:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800065c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800065e:	685a      	ldr	r2, [r3, #4]
 8000660:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000664:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000666:	685a      	ldr	r2, [r3, #4]
 8000668:	3901      	subs	r1, #1
 800066a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800066e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000672:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000674:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000678:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800067a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800067c:	3901      	subs	r1, #1
 800067e:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000682:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000684:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000686:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000688:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800068c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800068e:	689a      	ldr	r2, [r3, #8]
 8000690:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000694:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000696:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000698:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800069a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800069e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006a0:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006a2:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006a4:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80006a8:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006aa:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80006ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006ae:	f023 0303 	bic.w	r3, r3, #3
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80006b8:	2300      	movs	r3, #0
 80006ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80006be:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006c0:	689a      	ldr	r2, [r3, #8]
 80006c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80006c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006c8:	689a      	ldr	r2, [r3, #8]
 80006ca:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006ce:	e7b4      	b.n	800063a <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006d0:	685a      	ldr	r2, [r3, #4]
 80006d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006d6:	e7ca      	b.n	800066e <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 80006d8:	2001      	movs	r0, #1
 80006da:	e7ed      	b.n	80006b8 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 80006dc:	2001      	movs	r0, #1
}
 80006de:	bd10      	pop	{r4, pc}
 80006e0:	40012300 	.word	0x40012300
 80006e4:	0f000001 	.word	0x0f000001

080006e8 <HAL_ADC_ConfigChannel>:
{
 80006e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80006ea:	2300      	movs	r3, #0
 80006ec:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80006ee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	f000 8083 	beq.w	80007fe <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 80006f8:	680d      	ldr	r5, [r1, #0]
 80006fa:	6804      	ldr	r4, [r0, #0]
 80006fc:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 80006fe:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000700:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8000702:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000706:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000708:	d92a      	bls.n	8000760 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800070a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800070e:	68e7      	ldr	r7, [r4, #12]
 8000710:	3b1e      	subs	r3, #30
 8000712:	f04f 0e07 	mov.w	lr, #7
 8000716:	fa0e fe03 	lsl.w	lr, lr, r3
 800071a:	ea27 070e 	bic.w	r7, r7, lr
 800071e:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000720:	68e7      	ldr	r7, [r4, #12]
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	433b      	orrs	r3, r7
 8000728:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 800072a:	684a      	ldr	r2, [r1, #4]
 800072c:	2a06      	cmp	r2, #6
 800072e:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8000732:	d825      	bhi.n	8000780 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000734:	4413      	add	r3, r2
 8000736:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000738:	1f59      	subs	r1, r3, #5
 800073a:	231f      	movs	r3, #31
 800073c:	408b      	lsls	r3, r1
 800073e:	ea27 0303 	bic.w	r3, r7, r3
 8000742:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000744:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000746:	fa06 f101 	lsl.w	r1, r6, r1
 800074a:	4311      	orrs	r1, r2
 800074c:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800074e:	4b2d      	ldr	r3, [pc, #180]	; (8000804 <HAL_ADC_ConfigChannel+0x11c>)
 8000750:	429c      	cmp	r4, r3
 8000752:	d034      	beq.n	80007be <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 8000754:	2300      	movs	r3, #0
 8000756:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800075a:	4618      	mov	r0, r3
}
 800075c:	b003      	add	sp, #12
 800075e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000760:	6927      	ldr	r7, [r4, #16]
 8000762:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000766:	f04f 0e07 	mov.w	lr, #7
 800076a:	fa0e fe03 	lsl.w	lr, lr, r3
 800076e:	ea27 070e 	bic.w	r7, r7, lr
 8000772:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000774:	6927      	ldr	r7, [r4, #16]
 8000776:	fa02 f303 	lsl.w	r3, r2, r3
 800077a:	433b      	orrs	r3, r7
 800077c:	6123      	str	r3, [r4, #16]
 800077e:	e7d4      	b.n	800072a <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8000780:	2a0c      	cmp	r2, #12
 8000782:	d80e      	bhi.n	80007a2 <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000784:	4413      	add	r3, r2
 8000786:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000788:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 800078c:	231f      	movs	r3, #31
 800078e:	4093      	lsls	r3, r2
 8000790:	ea21 0303 	bic.w	r3, r1, r3
 8000794:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000796:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000798:	fa06 f202 	lsl.w	r2, r6, r2
 800079c:	431a      	orrs	r2, r3
 800079e:	6322      	str	r2, [r4, #48]	; 0x30
 80007a0:	e7d5      	b.n	800074e <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80007a2:	4413      	add	r3, r2
 80007a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80007a6:	3b41      	subs	r3, #65	; 0x41
 80007a8:	221f      	movs	r2, #31
 80007aa:	409a      	lsls	r2, r3
 80007ac:	ea21 0202 	bic.w	r2, r1, r2
 80007b0:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80007b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80007b4:	fa06 f103 	lsl.w	r1, r6, r3
 80007b8:	4311      	orrs	r1, r2
 80007ba:	62e1      	str	r1, [r4, #44]	; 0x2c
 80007bc:	e7c7      	b.n	800074e <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007be:	2d12      	cmp	r5, #18
 80007c0:	d104      	bne.n	80007cc <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80007c2:	4a11      	ldr	r2, [pc, #68]	; (8000808 <HAL_ADC_ConfigChannel+0x120>)
 80007c4:	6853      	ldr	r3, [r2, #4]
 80007c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007ca:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80007cc:	f1a5 0310 	sub.w	r3, r5, #16
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d8bf      	bhi.n	8000754 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80007d4:	4a0c      	ldr	r2, [pc, #48]	; (8000808 <HAL_ADC_ConfigChannel+0x120>)
 80007d6:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80007d8:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80007da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80007de:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80007e0:	d1b8      	bne.n	8000754 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <HAL_ADC_ConfigChannel+0x124>)
 80007e4:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <HAL_ADC_ConfigChannel+0x128>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	fbb3 f2f2 	udiv	r2, r3, r2
 80007ec:	230a      	movs	r3, #10
 80007ee:	4353      	muls	r3, r2
        counter--;
 80007f0:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80007f2:	9b01      	ldr	r3, [sp, #4]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d0ad      	beq.n	8000754 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 80007f8:	9b01      	ldr	r3, [sp, #4]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	e7f8      	b.n	80007f0 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 80007fe:	2002      	movs	r0, #2
 8000800:	e7ac      	b.n	800075c <HAL_ADC_ConfigChannel+0x74>
 8000802:	bf00      	nop
 8000804:	40012000 	.word	0x40012000
 8000808:	40012300 	.word	0x40012300
 800080c:	20000008 	.word	0x20000008
 8000810:	000f4240 	.word	0x000f4240

08000814 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000814:	4a07      	ldr	r2, [pc, #28]	; (8000834 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000816:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000818:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800081c:	041b      	lsls	r3, r3, #16
 800081e:	0c1b      	lsrs	r3, r3, #16
 8000820:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000824:	0200      	lsls	r0, r0, #8
 8000826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800082a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800082e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000830:	60d3      	str	r3, [r2, #12]
 8000832:	4770      	bx	lr
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000838:	4b17      	ldr	r3, [pc, #92]	; (8000898 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800083a:	b530      	push	{r4, r5, lr}
 800083c:	68dc      	ldr	r4, [r3, #12]
 800083e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000842:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000846:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000848:	2b04      	cmp	r3, #4
 800084a:	bf28      	it	cs
 800084c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800084e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000850:	f04f 0501 	mov.w	r5, #1
 8000854:	fa05 f303 	lsl.w	r3, r5, r3
 8000858:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800085c:	bf8c      	ite	hi
 800085e:	3c03      	subhi	r4, #3
 8000860:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000862:	4019      	ands	r1, r3
 8000864:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000866:	fa05 f404 	lsl.w	r4, r5, r4
 800086a:	3c01      	subs	r4, #1
 800086c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800086e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000870:	ea42 0201 	orr.w	r2, r2, r1
 8000874:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000878:	bfaf      	iteee	ge
 800087a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087e:	f000 000f 	andlt.w	r0, r0, #15
 8000882:	4b06      	ldrlt	r3, [pc, #24]	; (800089c <HAL_NVIC_SetPriority+0x64>)
 8000884:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000886:	bfa5      	ittet	ge
 8000888:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800088c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000890:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000894:	bd30      	pop	{r4, r5, pc}
 8000896:	bf00      	nop
 8000898:	e000ed00 	.word	0xe000ed00
 800089c:	e000ed14 	.word	0xe000ed14

080008a0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008a0:	3801      	subs	r0, #1
 80008a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008a6:	d20a      	bcs.n	80008be <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008aa:	4a07      	ldr	r2, [pc, #28]	; (80008c8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ac:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ae:	21f0      	movs	r1, #240	; 0xf0
 80008b0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008b6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80008be:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000e010 	.word	0xe000e010
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008d0:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008d2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000a84 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80008d8:	4a68      	ldr	r2, [pc, #416]	; (8000a7c <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008da:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000a88 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008de:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008e0:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80008e2:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008e6:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80008e8:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008ec:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80008f0:	45b6      	cmp	lr, r6
 80008f2:	f040 80ae 	bne.w	8000a52 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f6:	684c      	ldr	r4, [r1, #4]
 80008f8:	f024 0710 	bic.w	r7, r4, #16
 80008fc:	2f02      	cmp	r7, #2
 80008fe:	d116      	bne.n	800092e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000900:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000904:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000908:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800090c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000910:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000914:	f04f 0c0f 	mov.w	ip, #15
 8000918:	fa0c fc0b 	lsl.w	ip, ip, fp
 800091c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000920:	690d      	ldr	r5, [r1, #16]
 8000922:	fa05 f50b 	lsl.w	r5, r5, fp
 8000926:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800092a:	f8ca 5020 	str.w	r5, [sl, #32]
 800092e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000932:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000934:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000938:	fa05 f50a 	lsl.w	r5, r5, sl
 800093c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800093e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000942:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000946:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800094a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800094c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000950:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000952:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000956:	d811      	bhi.n	800097c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000958:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800095a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800095e:	68cf      	ldr	r7, [r1, #12]
 8000960:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000964:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000968:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800096a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800096c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000970:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000974:	409f      	lsls	r7, r3
 8000976:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800097a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800097c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800097e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000980:	688f      	ldr	r7, [r1, #8]
 8000982:	fa07 f70a 	lsl.w	r7, r7, sl
 8000986:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000988:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800098a:	00e5      	lsls	r5, r4, #3
 800098c:	d561      	bpl.n	8000a52 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	f04f 0b00 	mov.w	fp, #0
 8000992:	f8cd b00c 	str.w	fp, [sp, #12]
 8000996:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800099a:	4d39      	ldr	r5, [pc, #228]	; (8000a80 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80009a0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80009a4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80009a8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80009ac:	9703      	str	r7, [sp, #12]
 80009ae:	9f03      	ldr	r7, [sp, #12]
 80009b0:	f023 0703 	bic.w	r7, r3, #3
 80009b4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80009b8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009bc:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80009c0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009c4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80009c8:	f04f 0e0f 	mov.w	lr, #15
 80009cc:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009d0:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009d2:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009d6:	d043      	beq.n	8000a60 <HAL_GPIO_Init+0x194>
 80009d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80009dc:	42a8      	cmp	r0, r5
 80009de:	d041      	beq.n	8000a64 <HAL_GPIO_Init+0x198>
 80009e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80009e4:	42a8      	cmp	r0, r5
 80009e6:	d03f      	beq.n	8000a68 <HAL_GPIO_Init+0x19c>
 80009e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80009ec:	42a8      	cmp	r0, r5
 80009ee:	d03d      	beq.n	8000a6c <HAL_GPIO_Init+0x1a0>
 80009f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80009f4:	42a8      	cmp	r0, r5
 80009f6:	d03b      	beq.n	8000a70 <HAL_GPIO_Init+0x1a4>
 80009f8:	4548      	cmp	r0, r9
 80009fa:	d03b      	beq.n	8000a74 <HAL_GPIO_Init+0x1a8>
 80009fc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000a00:	42a8      	cmp	r0, r5
 8000a02:	d039      	beq.n	8000a78 <HAL_GPIO_Init+0x1ac>
 8000a04:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a08:	42a8      	cmp	r0, r5
 8000a0a:	bf14      	ite	ne
 8000a0c:	2508      	movne	r5, #8
 8000a0e:	2507      	moveq	r5, #7
 8000a10:	fa05 f50c 	lsl.w	r5, r5, ip
 8000a14:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a18:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000a1a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000a1c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a1e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000a22:	bf0c      	ite	eq
 8000a24:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000a26:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000a28:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000a2a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a2c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000a30:	bf0c      	ite	eq
 8000a32:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000a34:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000a36:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a38:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a3a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000a3e:	bf0c      	ite	eq
 8000a40:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000a42:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000a44:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000a46:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a48:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000a4a:	bf54      	ite	pl
 8000a4c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000a4e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000a50:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a52:	3301      	adds	r3, #1
 8000a54:	2b10      	cmp	r3, #16
 8000a56:	f47f af44 	bne.w	80008e2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000a5a:	b005      	add	sp, #20
 8000a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a60:	465d      	mov	r5, fp
 8000a62:	e7d5      	b.n	8000a10 <HAL_GPIO_Init+0x144>
 8000a64:	2501      	movs	r5, #1
 8000a66:	e7d3      	b.n	8000a10 <HAL_GPIO_Init+0x144>
 8000a68:	2502      	movs	r5, #2
 8000a6a:	e7d1      	b.n	8000a10 <HAL_GPIO_Init+0x144>
 8000a6c:	2503      	movs	r5, #3
 8000a6e:	e7cf      	b.n	8000a10 <HAL_GPIO_Init+0x144>
 8000a70:	2504      	movs	r5, #4
 8000a72:	e7cd      	b.n	8000a10 <HAL_GPIO_Init+0x144>
 8000a74:	2505      	movs	r5, #5
 8000a76:	e7cb      	b.n	8000a10 <HAL_GPIO_Init+0x144>
 8000a78:	2506      	movs	r5, #6
 8000a7a:	e7c9      	b.n	8000a10 <HAL_GPIO_Init+0x144>
 8000a7c:	40013c00 	.word	0x40013c00
 8000a80:	40020000 	.word	0x40020000
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40021400 	.word	0x40021400

08000a8c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a8c:	b10a      	cbz	r2, 8000a92 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a8e:	6181      	str	r1, [r0, #24]
 8000a90:	4770      	bx	lr
 8000a92:	0409      	lsls	r1, r1, #16
 8000a94:	e7fb      	b.n	8000a8e <HAL_GPIO_WritePin+0x2>
	...

08000a98 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000a98:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000a9a:	4604      	mov	r4, r0
 8000a9c:	2800      	cmp	r0, #0
 8000a9e:	d062      	beq.n	8000b66 <HAL_I2C_Init+0xce>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000aa0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000aa4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000aa8:	b91b      	cbnz	r3, 8000ab2 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000aaa:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000aae:	f000 ffb1 	bl	8001a14 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ab2:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000ab4:	4e2d      	ldr	r6, [pc, #180]	; (8000b6c <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 8000ab6:	4d2e      	ldr	r5, [pc, #184]	; (8000b70 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ab8:	2324      	movs	r3, #36	; 0x24
 8000aba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000abe:	6813      	ldr	r3, [r2, #0]
 8000ac0:	f023 0301 	bic.w	r3, r3, #1
 8000ac4:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000ac6:	f000 fa9f 	bl	8001008 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000aca:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8000acc:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000ace:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000ad2:	42b3      	cmp	r3, r6
 8000ad4:	bf84      	itt	hi
 8000ad6:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8000ada:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8000adc:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000ade:	bf91      	iteee	ls
 8000ae0:	1c69      	addls	r1, r5, #1
 8000ae2:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8000ae6:	fbb1 f1f5 	udivhi	r1, r1, r5
 8000aea:	3101      	addhi	r1, #1

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000aec:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000aee:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000af0:	d821      	bhi.n	8000b36 <HAL_I2C_Init+0x9e>
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000af8:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000afc:	2b03      	cmp	r3, #3
 8000afe:	bf98      	it	ls
 8000b00:	2004      	movls	r0, #4

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000b02:	6a21      	ldr	r1, [r4, #32]
 8000b04:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000b06:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000b08:	430b      	orrs	r3, r1
 8000b0a:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000b0c:	68e1      	ldr	r1, [r4, #12]
 8000b0e:	6923      	ldr	r3, [r4, #16]
 8000b10:	430b      	orrs	r3, r1
 8000b12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000b14:	69a1      	ldr	r1, [r4, #24]
 8000b16:	6963      	ldr	r3, [r4, #20]
 8000b18:	430b      	orrs	r3, r1
 8000b1a:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000b1c:	6813      	ldr	r3, [r2, #0]
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b24:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000b26:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b28:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000b2a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000b2e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b30:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8000b34:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000b36:	68a1      	ldr	r1, [r4, #8]
 8000b38:	b949      	cbnz	r1, 8000b4e <HAL_I2C_Init+0xb6>
 8000b3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000b3e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b42:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000b46:	b163      	cbz	r3, 8000b62 <HAL_I2C_Init+0xca>
 8000b48:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8000b4c:	e7d9      	b.n	8000b02 <HAL_I2C_Init+0x6a>
 8000b4e:	2119      	movs	r1, #25
 8000b50:	434b      	muls	r3, r1
 8000b52:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b56:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000b5a:	b113      	cbz	r3, 8000b62 <HAL_I2C_Init+0xca>
 8000b5c:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8000b60:	e7cf      	b.n	8000b02 <HAL_I2C_Init+0x6a>
 8000b62:	2001      	movs	r0, #1
 8000b64:	e7cd      	b.n	8000b02 <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8000b66:	2001      	movs	r0, #1
}
 8000b68:	bd70      	pop	{r4, r5, r6, pc}
 8000b6a:	bf00      	nop
 8000b6c:	000186a0 	.word	0x000186a0
 8000b70:	000f4240 	.word	0x000f4240

08000b74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b78:	4604      	mov	r4, r0
 8000b7a:	b918      	cbnz	r0, 8000b84 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000b7c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000b7e:	b002      	add	sp, #8
 8000b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b84:	6803      	ldr	r3, [r0, #0]
 8000b86:	07dd      	lsls	r5, r3, #31
 8000b88:	d410      	bmi.n	8000bac <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b8a:	6823      	ldr	r3, [r4, #0]
 8000b8c:	0798      	lsls	r0, r3, #30
 8000b8e:	d458      	bmi.n	8000c42 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b90:	6823      	ldr	r3, [r4, #0]
 8000b92:	071a      	lsls	r2, r3, #28
 8000b94:	f100 809a 	bmi.w	8000ccc <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b98:	6823      	ldr	r3, [r4, #0]
 8000b9a:	075b      	lsls	r3, r3, #29
 8000b9c:	f100 80b8 	bmi.w	8000d10 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ba0:	69a2      	ldr	r2, [r4, #24]
 8000ba2:	2a00      	cmp	r2, #0
 8000ba4:	f040 8119 	bne.w	8000dda <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000ba8:	2000      	movs	r0, #0
 8000baa:	e7e8      	b.n	8000b7e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bac:	4ba6      	ldr	r3, [pc, #664]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
 8000bae:	689a      	ldr	r2, [r3, #8]
 8000bb0:	f002 020c 	and.w	r2, r2, #12
 8000bb4:	2a04      	cmp	r2, #4
 8000bb6:	d007      	beq.n	8000bc8 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bb8:	689a      	ldr	r2, [r3, #8]
 8000bba:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bbe:	2a08      	cmp	r2, #8
 8000bc0:	d10a      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	0259      	lsls	r1, r3, #9
 8000bc6:	d507      	bpl.n	8000bd8 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bc8:	4b9f      	ldr	r3, [pc, #636]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	039a      	lsls	r2, r3, #14
 8000bce:	d5dc      	bpl.n	8000b8a <HAL_RCC_OscConfig+0x16>
 8000bd0:	6863      	ldr	r3, [r4, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1d9      	bne.n	8000b8a <HAL_RCC_OscConfig+0x16>
 8000bd6:	e7d1      	b.n	8000b7c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bd8:	6863      	ldr	r3, [r4, #4]
 8000bda:	4d9b      	ldr	r5, [pc, #620]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
 8000bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000be0:	d111      	bne.n	8000c06 <HAL_RCC_OscConfig+0x92>
 8000be2:	682b      	ldr	r3, [r5, #0]
 8000be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000be8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000bea:	f7ff fcbf 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bee:	4d96      	ldr	r5, [pc, #600]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000bf0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bf2:	682b      	ldr	r3, [r5, #0]
 8000bf4:	039b      	lsls	r3, r3, #14
 8000bf6:	d4c8      	bmi.n	8000b8a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bf8:	f7ff fcb8 	bl	800056c <HAL_GetTick>
 8000bfc:	1b80      	subs	r0, r0, r6
 8000bfe:	2864      	cmp	r0, #100	; 0x64
 8000c00:	d9f7      	bls.n	8000bf2 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000c02:	2003      	movs	r0, #3
 8000c04:	e7bb      	b.n	8000b7e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c0a:	d104      	bne.n	8000c16 <HAL_RCC_OscConfig+0xa2>
 8000c0c:	682b      	ldr	r3, [r5, #0]
 8000c0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c12:	602b      	str	r3, [r5, #0]
 8000c14:	e7e5      	b.n	8000be2 <HAL_RCC_OscConfig+0x6e>
 8000c16:	682a      	ldr	r2, [r5, #0]
 8000c18:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000c1c:	602a      	str	r2, [r5, #0]
 8000c1e:	682a      	ldr	r2, [r5, #0]
 8000c20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c24:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d1df      	bne.n	8000bea <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8000c2a:	f7ff fc9f 	bl	800056c <HAL_GetTick>
 8000c2e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c30:	682b      	ldr	r3, [r5, #0]
 8000c32:	039f      	lsls	r7, r3, #14
 8000c34:	d5a9      	bpl.n	8000b8a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c36:	f7ff fc99 	bl	800056c <HAL_GetTick>
 8000c3a:	1b80      	subs	r0, r0, r6
 8000c3c:	2864      	cmp	r0, #100	; 0x64
 8000c3e:	d9f7      	bls.n	8000c30 <HAL_RCC_OscConfig+0xbc>
 8000c40:	e7df      	b.n	8000c02 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c42:	4b81      	ldr	r3, [pc, #516]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
 8000c44:	689a      	ldr	r2, [r3, #8]
 8000c46:	f012 0f0c 	tst.w	r2, #12
 8000c4a:	d007      	beq.n	8000c5c <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c4c:	689a      	ldr	r2, [r3, #8]
 8000c4e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c52:	2a08      	cmp	r2, #8
 8000c54:	d111      	bne.n	8000c7a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	025e      	lsls	r6, r3, #9
 8000c5a:	d40e      	bmi.n	8000c7a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c5c:	4b7a      	ldr	r3, [pc, #488]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	0795      	lsls	r5, r2, #30
 8000c62:	d502      	bpl.n	8000c6a <HAL_RCC_OscConfig+0xf6>
 8000c64:	68e2      	ldr	r2, [r4, #12]
 8000c66:	2a01      	cmp	r2, #1
 8000c68:	d188      	bne.n	8000b7c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	6921      	ldr	r1, [r4, #16]
 8000c6e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000c72:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000c76:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c78:	e78a      	b.n	8000b90 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c7a:	68e2      	ldr	r2, [r4, #12]
 8000c7c:	4b73      	ldr	r3, [pc, #460]	; (8000e4c <HAL_RCC_OscConfig+0x2d8>)
 8000c7e:	b1b2      	cbz	r2, 8000cae <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000c80:	2201      	movs	r2, #1
 8000c82:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c84:	f7ff fc72 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c88:	4d6f      	ldr	r5, [pc, #444]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000c8a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c8c:	682b      	ldr	r3, [r5, #0]
 8000c8e:	0798      	lsls	r0, r3, #30
 8000c90:	d507      	bpl.n	8000ca2 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c92:	682b      	ldr	r3, [r5, #0]
 8000c94:	6922      	ldr	r2, [r4, #16]
 8000c96:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000c9a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000c9e:	602b      	str	r3, [r5, #0]
 8000ca0:	e776      	b.n	8000b90 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ca2:	f7ff fc63 	bl	800056c <HAL_GetTick>
 8000ca6:	1b80      	subs	r0, r0, r6
 8000ca8:	2802      	cmp	r0, #2
 8000caa:	d9ef      	bls.n	8000c8c <HAL_RCC_OscConfig+0x118>
 8000cac:	e7a9      	b.n	8000c02 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000cae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000cb0:	f7ff fc5c 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cb4:	4d64      	ldr	r5, [pc, #400]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000cb6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cb8:	682b      	ldr	r3, [r5, #0]
 8000cba:	0799      	lsls	r1, r3, #30
 8000cbc:	f57f af68 	bpl.w	8000b90 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cc0:	f7ff fc54 	bl	800056c <HAL_GetTick>
 8000cc4:	1b80      	subs	r0, r0, r6
 8000cc6:	2802      	cmp	r0, #2
 8000cc8:	d9f6      	bls.n	8000cb8 <HAL_RCC_OscConfig+0x144>
 8000cca:	e79a      	b.n	8000c02 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000ccc:	6962      	ldr	r2, [r4, #20]
 8000cce:	4b60      	ldr	r3, [pc, #384]	; (8000e50 <HAL_RCC_OscConfig+0x2dc>)
 8000cd0:	b17a      	cbz	r2, 8000cf2 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000cd6:	f7ff fc49 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cda:	4d5b      	ldr	r5, [pc, #364]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000cdc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cde:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000ce0:	079f      	lsls	r7, r3, #30
 8000ce2:	f53f af59 	bmi.w	8000b98 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ce6:	f7ff fc41 	bl	800056c <HAL_GetTick>
 8000cea:	1b80      	subs	r0, r0, r6
 8000cec:	2802      	cmp	r0, #2
 8000cee:	d9f6      	bls.n	8000cde <HAL_RCC_OscConfig+0x16a>
 8000cf0:	e787      	b.n	8000c02 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000cf2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000cf4:	f7ff fc3a 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cf8:	4d53      	ldr	r5, [pc, #332]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000cfa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cfc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000cfe:	0798      	lsls	r0, r3, #30
 8000d00:	f57f af4a 	bpl.w	8000b98 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d04:	f7ff fc32 	bl	800056c <HAL_GetTick>
 8000d08:	1b80      	subs	r0, r0, r6
 8000d0a:	2802      	cmp	r0, #2
 8000d0c:	d9f6      	bls.n	8000cfc <HAL_RCC_OscConfig+0x188>
 8000d0e:	e778      	b.n	8000c02 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d10:	4b4d      	ldr	r3, [pc, #308]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
 8000d12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d14:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000d18:	d128      	bne.n	8000d6c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	9201      	str	r2, [sp, #4]
 8000d1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d1e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d22:	641a      	str	r2, [r3, #64]	; 0x40
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	9301      	str	r3, [sp, #4]
 8000d2c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000d2e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d30:	4d48      	ldr	r5, [pc, #288]	; (8000e54 <HAL_RCC_OscConfig+0x2e0>)
 8000d32:	682b      	ldr	r3, [r5, #0]
 8000d34:	05d9      	lsls	r1, r3, #23
 8000d36:	d51b      	bpl.n	8000d70 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d38:	68a3      	ldr	r3, [r4, #8]
 8000d3a:	4d43      	ldr	r5, [pc, #268]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d127      	bne.n	8000d90 <HAL_RCC_OscConfig+0x21c>
 8000d40:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000d48:	f7ff fc10 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d4c:	4d3e      	ldr	r5, [pc, #248]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000d4e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d50:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d54:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d56:	079b      	lsls	r3, r3, #30
 8000d58:	d539      	bpl.n	8000dce <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	f43f af20 	beq.w	8000ba0 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d60:	4a39      	ldr	r2, [pc, #228]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
 8000d62:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d68:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6a:	e719      	b.n	8000ba0 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e7df      	b.n	8000d30 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d70:	682b      	ldr	r3, [r5, #0]
 8000d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d76:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000d78:	f7ff fbf8 	bl	800056c <HAL_GetTick>
 8000d7c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d7e:	682b      	ldr	r3, [r5, #0]
 8000d80:	05da      	lsls	r2, r3, #23
 8000d82:	d4d9      	bmi.n	8000d38 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d84:	f7ff fbf2 	bl	800056c <HAL_GetTick>
 8000d88:	1bc0      	subs	r0, r0, r7
 8000d8a:	2802      	cmp	r0, #2
 8000d8c:	d9f7      	bls.n	8000d7e <HAL_RCC_OscConfig+0x20a>
 8000d8e:	e738      	b.n	8000c02 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d90:	2b05      	cmp	r3, #5
 8000d92:	d104      	bne.n	8000d9e <HAL_RCC_OscConfig+0x22a>
 8000d94:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	672b      	str	r3, [r5, #112]	; 0x70
 8000d9c:	e7d0      	b.n	8000d40 <HAL_RCC_OscConfig+0x1cc>
 8000d9e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000da0:	f022 0201 	bic.w	r2, r2, #1
 8000da4:	672a      	str	r2, [r5, #112]	; 0x70
 8000da6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000da8:	f022 0204 	bic.w	r2, r2, #4
 8000dac:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d1ca      	bne.n	8000d48 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000db2:	f7ff fbdb 	bl	800056c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000db6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000dba:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dbc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000dbe:	0798      	lsls	r0, r3, #30
 8000dc0:	d5cb      	bpl.n	8000d5a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dc2:	f7ff fbd3 	bl	800056c <HAL_GetTick>
 8000dc6:	1bc0      	subs	r0, r0, r7
 8000dc8:	4540      	cmp	r0, r8
 8000dca:	d9f7      	bls.n	8000dbc <HAL_RCC_OscConfig+0x248>
 8000dcc:	e719      	b.n	8000c02 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dce:	f7ff fbcd 	bl	800056c <HAL_GetTick>
 8000dd2:	1bc0      	subs	r0, r0, r7
 8000dd4:	4540      	cmp	r0, r8
 8000dd6:	d9bd      	bls.n	8000d54 <HAL_RCC_OscConfig+0x1e0>
 8000dd8:	e713      	b.n	8000c02 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000dda:	4d1b      	ldr	r5, [pc, #108]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
 8000ddc:	68ab      	ldr	r3, [r5, #8]
 8000dde:	f003 030c 	and.w	r3, r3, #12
 8000de2:	2b08      	cmp	r3, #8
 8000de4:	f43f aeca 	beq.w	8000b7c <HAL_RCC_OscConfig+0x8>
 8000de8:	4e1b      	ldr	r6, [pc, #108]	; (8000e58 <HAL_RCC_OscConfig+0x2e4>)
 8000dea:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dec:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000dee:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000df0:	d134      	bne.n	8000e5c <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000df2:	f7ff fbbb 	bl	800056c <HAL_GetTick>
 8000df6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000df8:	682b      	ldr	r3, [r5, #0]
 8000dfa:	0199      	lsls	r1, r3, #6
 8000dfc:	d41e      	bmi.n	8000e3c <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000dfe:	6a22      	ldr	r2, [r4, #32]
 8000e00:	69e3      	ldr	r3, [r4, #28]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e06:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000e0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000e0c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000e10:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e12:	4c0d      	ldr	r4, [pc, #52]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000e14:	0852      	lsrs	r2, r2, #1
 8000e16:	3a01      	subs	r2, #1
 8000e18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e1c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000e1e:	2301      	movs	r3, #1
 8000e20:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000e22:	f7ff fba3 	bl	800056c <HAL_GetTick>
 8000e26:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e28:	6823      	ldr	r3, [r4, #0]
 8000e2a:	019a      	lsls	r2, r3, #6
 8000e2c:	f53f aebc 	bmi.w	8000ba8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e30:	f7ff fb9c 	bl	800056c <HAL_GetTick>
 8000e34:	1b40      	subs	r0, r0, r5
 8000e36:	2802      	cmp	r0, #2
 8000e38:	d9f6      	bls.n	8000e28 <HAL_RCC_OscConfig+0x2b4>
 8000e3a:	e6e2      	b.n	8000c02 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e3c:	f7ff fb96 	bl	800056c <HAL_GetTick>
 8000e40:	1bc0      	subs	r0, r0, r7
 8000e42:	2802      	cmp	r0, #2
 8000e44:	d9d8      	bls.n	8000df8 <HAL_RCC_OscConfig+0x284>
 8000e46:	e6dc      	b.n	8000c02 <HAL_RCC_OscConfig+0x8e>
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	42470000 	.word	0x42470000
 8000e50:	42470e80 	.word	0x42470e80
 8000e54:	40007000 	.word	0x40007000
 8000e58:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000e5c:	f7ff fb86 	bl	800056c <HAL_GetTick>
 8000e60:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e62:	682b      	ldr	r3, [r5, #0]
 8000e64:	019b      	lsls	r3, r3, #6
 8000e66:	f57f ae9f 	bpl.w	8000ba8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e6a:	f7ff fb7f 	bl	800056c <HAL_GetTick>
 8000e6e:	1b00      	subs	r0, r0, r4
 8000e70:	2802      	cmp	r0, #2
 8000e72:	d9f6      	bls.n	8000e62 <HAL_RCC_OscConfig+0x2ee>
 8000e74:	e6c5      	b.n	8000c02 <HAL_RCC_OscConfig+0x8e>
 8000e76:	bf00      	nop

08000e78 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e78:	4913      	ldr	r1, [pc, #76]	; (8000ec8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000e7a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e7c:	688b      	ldr	r3, [r1, #8]
 8000e7e:	f003 030c 	and.w	r3, r3, #12
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	d003      	beq.n	8000e8e <HAL_RCC_GetSysClockFreq+0x16>
 8000e86:	2b08      	cmp	r3, #8
 8000e88:	d003      	beq.n	8000e92 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000e8a:	4810      	ldr	r0, [pc, #64]	; (8000ecc <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000e8c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000e8e:	4810      	ldr	r0, [pc, #64]	; (8000ed0 <HAL_RCC_GetSysClockFreq+0x58>)
 8000e90:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e92:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e94:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e96:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e98:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e9c:	bf14      	ite	ne
 8000e9e:	480c      	ldrne	r0, [pc, #48]	; (8000ed0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ea0:	480a      	ldreq	r0, [pc, #40]	; (8000ecc <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ea2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000ea6:	bf18      	it	ne
 8000ea8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000eaa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000eae:	fba1 0100 	umull	r0, r1, r1, r0
 8000eb2:	f7ff f989 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000eb6:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <HAL_RCC_GetSysClockFreq+0x50>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000ec2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ec6:	bd08      	pop	{r3, pc}
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	00f42400 	.word	0x00f42400
 8000ed0:	007a1200 	.word	0x007a1200

08000ed4 <HAL_RCC_ClockConfig>:
{
 8000ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ed8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000eda:	4604      	mov	r4, r0
 8000edc:	b910      	cbnz	r0, 8000ee4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000ede:	2001      	movs	r0, #1
 8000ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ee4:	4b44      	ldr	r3, [pc, #272]	; (8000ff8 <HAL_RCC_ClockConfig+0x124>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	f002 020f 	and.w	r2, r2, #15
 8000eec:	428a      	cmp	r2, r1
 8000eee:	d328      	bcc.n	8000f42 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ef0:	6821      	ldr	r1, [r4, #0]
 8000ef2:	078f      	lsls	r7, r1, #30
 8000ef4:	d42d      	bmi.n	8000f52 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ef6:	07c8      	lsls	r0, r1, #31
 8000ef8:	d440      	bmi.n	8000f7c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000efa:	4b3f      	ldr	r3, [pc, #252]	; (8000ff8 <HAL_RCC_ClockConfig+0x124>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	f002 020f 	and.w	r2, r2, #15
 8000f02:	4295      	cmp	r5, r2
 8000f04:	d366      	bcc.n	8000fd4 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f06:	6822      	ldr	r2, [r4, #0]
 8000f08:	0751      	lsls	r1, r2, #29
 8000f0a:	d46c      	bmi.n	8000fe6 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f0c:	0713      	lsls	r3, r2, #28
 8000f0e:	d507      	bpl.n	8000f20 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000f10:	4a3a      	ldr	r2, [pc, #232]	; (8000ffc <HAL_RCC_ClockConfig+0x128>)
 8000f12:	6921      	ldr	r1, [r4, #16]
 8000f14:	6893      	ldr	r3, [r2, #8]
 8000f16:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000f1a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f1e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000f20:	f7ff ffaa 	bl	8000e78 <HAL_RCC_GetSysClockFreq>
 8000f24:	4b35      	ldr	r3, [pc, #212]	; (8000ffc <HAL_RCC_ClockConfig+0x128>)
 8000f26:	4a36      	ldr	r2, [pc, #216]	; (8001000 <HAL_RCC_ClockConfig+0x12c>)
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000f2e:	5cd3      	ldrb	r3, [r2, r3]
 8000f30:	40d8      	lsrs	r0, r3
 8000f32:	4b34      	ldr	r3, [pc, #208]	; (8001004 <HAL_RCC_ClockConfig+0x130>)
 8000f34:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f36:	2000      	movs	r0, #0
 8000f38:	f7ff face 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f42:	b2ca      	uxtb	r2, r1
 8000f44:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 030f 	and.w	r3, r3, #15
 8000f4c:	4299      	cmp	r1, r3
 8000f4e:	d1c6      	bne.n	8000ede <HAL_RCC_ClockConfig+0xa>
 8000f50:	e7ce      	b.n	8000ef0 <HAL_RCC_ClockConfig+0x1c>
 8000f52:	4b2a      	ldr	r3, [pc, #168]	; (8000ffc <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f54:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f58:	bf1e      	ittt	ne
 8000f5a:	689a      	ldrne	r2, [r3, #8]
 8000f5c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000f60:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f62:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f64:	bf42      	ittt	mi
 8000f66:	689a      	ldrmi	r2, [r3, #8]
 8000f68:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000f6c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	68a0      	ldr	r0, [r4, #8]
 8000f72:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000f76:	4302      	orrs	r2, r0
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	e7bc      	b.n	8000ef6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f7c:	6862      	ldr	r2, [r4, #4]
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <HAL_RCC_ClockConfig+0x128>)
 8000f80:	2a01      	cmp	r2, #1
 8000f82:	d11d      	bne.n	8000fc0 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f8a:	d0a8      	beq.n	8000ede <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f8c:	4e1b      	ldr	r6, [pc, #108]	; (8000ffc <HAL_RCC_ClockConfig+0x128>)
 8000f8e:	68b3      	ldr	r3, [r6, #8]
 8000f90:	f023 0303 	bic.w	r3, r3, #3
 8000f94:	4313      	orrs	r3, r2
 8000f96:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000f98:	f7ff fae8 	bl	800056c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f9c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000fa0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fa2:	68b3      	ldr	r3, [r6, #8]
 8000fa4:	6862      	ldr	r2, [r4, #4]
 8000fa6:	f003 030c 	and.w	r3, r3, #12
 8000faa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000fae:	d0a4      	beq.n	8000efa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fb0:	f7ff fadc 	bl	800056c <HAL_GetTick>
 8000fb4:	1bc0      	subs	r0, r0, r7
 8000fb6:	4540      	cmp	r0, r8
 8000fb8:	d9f3      	bls.n	8000fa2 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000fba:	2003      	movs	r0, #3
}
 8000fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fc0:	1e91      	subs	r1, r2, #2
 8000fc2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fc4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fc6:	d802      	bhi.n	8000fce <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fc8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000fcc:	e7dd      	b.n	8000f8a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fce:	f013 0f02 	tst.w	r3, #2
 8000fd2:	e7da      	b.n	8000f8a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fd4:	b2ea      	uxtb	r2, r5
 8000fd6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	429d      	cmp	r5, r3
 8000fe0:	f47f af7d 	bne.w	8000ede <HAL_RCC_ClockConfig+0xa>
 8000fe4:	e78f      	b.n	8000f06 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fe6:	4905      	ldr	r1, [pc, #20]	; (8000ffc <HAL_RCC_ClockConfig+0x128>)
 8000fe8:	68e0      	ldr	r0, [r4, #12]
 8000fea:	688b      	ldr	r3, [r1, #8]
 8000fec:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000ff0:	4303      	orrs	r3, r0
 8000ff2:	608b      	str	r3, [r1, #8]
 8000ff4:	e78a      	b.n	8000f0c <HAL_RCC_ClockConfig+0x38>
 8000ff6:	bf00      	nop
 8000ff8:	40023c00 	.word	0x40023c00
 8000ffc:	40023800 	.word	0x40023800
 8001000:	08002254 	.word	0x08002254
 8001004:	20000008 	.word	0x20000008

08001008 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <HAL_RCC_GetPCLK1Freq+0x14>)
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <HAL_RCC_GetPCLK1Freq+0x18>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001012:	5cd3      	ldrb	r3, [r2, r3]
 8001014:	4a03      	ldr	r2, [pc, #12]	; (8001024 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001016:	6810      	ldr	r0, [r2, #0]
}
 8001018:	40d8      	lsrs	r0, r3
 800101a:	4770      	bx	lr
 800101c:	40023800 	.word	0x40023800
 8001020:	08002264 	.word	0x08002264
 8001024:	20000008 	.word	0x20000008

08001028 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <HAL_RCC_GetPCLK2Freq+0x14>)
 800102a:	4a05      	ldr	r2, [pc, #20]	; (8001040 <HAL_RCC_GetPCLK2Freq+0x18>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001032:	5cd3      	ldrb	r3, [r2, r3]
 8001034:	4a03      	ldr	r2, [pc, #12]	; (8001044 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001036:	6810      	ldr	r0, [r2, #0]
}
 8001038:	40d8      	lsrs	r0, r3
 800103a:	4770      	bx	lr
 800103c:	40023800 	.word	0x40023800
 8001040:	08002264 	.word	0x08002264
 8001044:	20000008 	.word	0x20000008

08001048 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001048:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 800104a:	4604      	mov	r4, r0
 800104c:	2800      	cmp	r0, #0
 800104e:	d036      	beq.n	80010be <HAL_SPI_Init+0x76>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001054:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001058:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800105c:	b91b      	cbnz	r3, 8001066 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800105e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001062:	f000 fddb 	bl	8001c1c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001066:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001068:	68a0      	ldr	r0, [r4, #8]
 800106a:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 800106c:	2302      	movs	r3, #2
 800106e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001072:	680b      	ldr	r3, [r1, #0]
 8001074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001078:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800107a:	6863      	ldr	r3, [r4, #4]
 800107c:	4303      	orrs	r3, r0
 800107e:	68e0      	ldr	r0, [r4, #12]
 8001080:	4303      	orrs	r3, r0
 8001082:	6920      	ldr	r0, [r4, #16]
 8001084:	4303      	orrs	r3, r0
 8001086:	6960      	ldr	r0, [r4, #20]
 8001088:	4303      	orrs	r3, r0
 800108a:	69e0      	ldr	r0, [r4, #28]
 800108c:	4303      	orrs	r3, r0
 800108e:	6a20      	ldr	r0, [r4, #32]
 8001090:	4303      	orrs	r3, r0
 8001092:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001094:	4303      	orrs	r3, r0
 8001096:	f402 7000 	and.w	r0, r2, #512	; 0x200
 800109a:	4303      	orrs	r3, r0
 800109c:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800109e:	0c12      	lsrs	r2, r2, #16
 80010a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80010a2:	f002 0204 	and.w	r2, r2, #4
 80010a6:	431a      	orrs	r2, r3
 80010a8:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80010aa:	69cb      	ldr	r3, [r1, #28]
 80010ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010b0:	61cb      	str	r3, [r1, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80010b2:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80010b4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80010b6:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80010b8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 80010bc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80010be:	2001      	movs	r0, #1
}
 80010c0:	bd10      	pop	{r4, pc}
	...

080010c4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80010c4:	6a03      	ldr	r3, [r0, #32]
 80010c6:	f023 0301 	bic.w	r3, r3, #1
 80010ca:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80010cc:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80010ce:	6842      	ldr	r2, [r0, #4]
{
 80010d0:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80010d2:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80010d4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80010d6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80010da:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80010dc:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80010de:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80010e2:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80010e4:	4c0c      	ldr	r4, [pc, #48]	; (8001118 <TIM_OC1_SetConfig+0x54>)
 80010e6:	42a0      	cmp	r0, r4
 80010e8:	d009      	beq.n	80010fe <TIM_OC1_SetConfig+0x3a>
 80010ea:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80010ee:	42a0      	cmp	r0, r4
 80010f0:	d005      	beq.n	80010fe <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80010f2:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80010f4:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80010f6:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80010f8:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80010fa:	6203      	str	r3, [r0, #32]
} 
 80010fc:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 80010fe:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001100:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001102:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001106:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001108:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800110a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800110e:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001110:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001114:	4322      	orrs	r2, r4
 8001116:	e7ec      	b.n	80010f2 <TIM_OC1_SetConfig+0x2e>
 8001118:	40010000 	.word	0x40010000

0800111c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800111c:	6a03      	ldr	r3, [r0, #32]
 800111e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001122:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001124:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001126:	6842      	ldr	r2, [r0, #4]
{
 8001128:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800112a:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800112c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800112e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001132:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001134:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001136:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800113a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800113e:	4c0e      	ldr	r4, [pc, #56]	; (8001178 <TIM_OC3_SetConfig+0x5c>)
 8001140:	42a0      	cmp	r0, r4
 8001142:	d009      	beq.n	8001158 <TIM_OC3_SetConfig+0x3c>
 8001144:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001148:	42a0      	cmp	r0, r4
 800114a:	d005      	beq.n	8001158 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800114c:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800114e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001150:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001152:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001154:	6203      	str	r3, [r0, #32]
}
 8001156:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001158:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800115a:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 800115c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001160:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001164:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001166:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800116a:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 800116c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001170:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8001174:	e7ea      	b.n	800114c <TIM_OC3_SetConfig+0x30>
 8001176:	bf00      	nop
 8001178:	40010000 	.word	0x40010000

0800117c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800117c:	6a03      	ldr	r3, [r0, #32]
 800117e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001182:	6203      	str	r3, [r0, #32]
{
 8001184:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001186:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001188:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800118a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800118c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800118e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001192:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001196:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001198:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800119c:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80011a0:	4d09      	ldr	r5, [pc, #36]	; (80011c8 <TIM_OC4_SetConfig+0x4c>)
 80011a2:	42a8      	cmp	r0, r5
 80011a4:	d009      	beq.n	80011ba <TIM_OC4_SetConfig+0x3e>
 80011a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011aa:	42a8      	cmp	r0, r5
 80011ac:	d005      	beq.n	80011ba <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80011ae:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80011b0:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80011b2:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80011b4:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80011b6:	6204      	str	r4, [r0, #32]
}
 80011b8:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80011ba:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80011bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80011c0:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80011c4:	e7f3      	b.n	80011ae <TIM_OC4_SetConfig+0x32>
 80011c6:	bf00      	nop
 80011c8:	40010000 	.word	0x40010000

080011cc <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80011cc:	4a2e      	ldr	r2, [pc, #184]	; (8001288 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 80011ce:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80011d0:	4290      	cmp	r0, r2
 80011d2:	d012      	beq.n	80011fa <TIM_Base_SetConfig+0x2e>
 80011d4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80011d8:	d00f      	beq.n	80011fa <TIM_Base_SetConfig+0x2e>
 80011da:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80011de:	4290      	cmp	r0, r2
 80011e0:	d00b      	beq.n	80011fa <TIM_Base_SetConfig+0x2e>
 80011e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011e6:	4290      	cmp	r0, r2
 80011e8:	d007      	beq.n	80011fa <TIM_Base_SetConfig+0x2e>
 80011ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011ee:	4290      	cmp	r0, r2
 80011f0:	d003      	beq.n	80011fa <TIM_Base_SetConfig+0x2e>
 80011f2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80011f6:	4290      	cmp	r0, r2
 80011f8:	d11d      	bne.n	8001236 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 80011fa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80011fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001200:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001202:	4a21      	ldr	r2, [pc, #132]	; (8001288 <TIM_Base_SetConfig+0xbc>)
 8001204:	4290      	cmp	r0, r2
 8001206:	d104      	bne.n	8001212 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001208:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800120a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800120e:	4313      	orrs	r3, r2
 8001210:	e028      	b.n	8001264 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001212:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001216:	d0f7      	beq.n	8001208 <TIM_Base_SetConfig+0x3c>
 8001218:	4a1c      	ldr	r2, [pc, #112]	; (800128c <TIM_Base_SetConfig+0xc0>)
 800121a:	4290      	cmp	r0, r2
 800121c:	d0f4      	beq.n	8001208 <TIM_Base_SetConfig+0x3c>
 800121e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001222:	4290      	cmp	r0, r2
 8001224:	d0f0      	beq.n	8001208 <TIM_Base_SetConfig+0x3c>
 8001226:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800122a:	4290      	cmp	r0, r2
 800122c:	d0ec      	beq.n	8001208 <TIM_Base_SetConfig+0x3c>
 800122e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001232:	4290      	cmp	r0, r2
 8001234:	d0e8      	beq.n	8001208 <TIM_Base_SetConfig+0x3c>
 8001236:	4a16      	ldr	r2, [pc, #88]	; (8001290 <TIM_Base_SetConfig+0xc4>)
 8001238:	4290      	cmp	r0, r2
 800123a:	d0e5      	beq.n	8001208 <TIM_Base_SetConfig+0x3c>
 800123c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001240:	4290      	cmp	r0, r2
 8001242:	d0e1      	beq.n	8001208 <TIM_Base_SetConfig+0x3c>
 8001244:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001248:	4290      	cmp	r0, r2
 800124a:	d0dd      	beq.n	8001208 <TIM_Base_SetConfig+0x3c>
 800124c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001250:	4290      	cmp	r0, r2
 8001252:	d0d9      	beq.n	8001208 <TIM_Base_SetConfig+0x3c>
 8001254:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001258:	4290      	cmp	r0, r2
 800125a:	d0d5      	beq.n	8001208 <TIM_Base_SetConfig+0x3c>
 800125c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001260:	4290      	cmp	r0, r2
 8001262:	d0d1      	beq.n	8001208 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8001264:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001266:	688b      	ldr	r3, [r1, #8]
 8001268:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800126a:	680b      	ldr	r3, [r1, #0]
 800126c:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <TIM_Base_SetConfig+0xbc>)
 8001270:	4298      	cmp	r0, r3
 8001272:	d006      	beq.n	8001282 <TIM_Base_SetConfig+0xb6>
 8001274:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001278:	4298      	cmp	r0, r3
 800127a:	d002      	beq.n	8001282 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 800127c:	2301      	movs	r3, #1
 800127e:	6143      	str	r3, [r0, #20]
}
 8001280:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001282:	690b      	ldr	r3, [r1, #16]
 8001284:	6303      	str	r3, [r0, #48]	; 0x30
 8001286:	e7f9      	b.n	800127c <TIM_Base_SetConfig+0xb0>
 8001288:	40010000 	.word	0x40010000
 800128c:	40000400 	.word	0x40000400
 8001290:	40014000 	.word	0x40014000

08001294 <HAL_TIM_Base_Init>:
{ 
 8001294:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001296:	4604      	mov	r4, r0
 8001298:	b1a0      	cbz	r0, 80012c4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800129a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800129e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80012a2:	b91b      	cbnz	r3, 80012ac <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80012a4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80012a8:	f000 fe42 	bl	8001f30 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80012ac:	2302      	movs	r3, #2
 80012ae:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80012b2:	6820      	ldr	r0, [r4, #0]
 80012b4:	1d21      	adds	r1, r4, #4
 80012b6:	f7ff ff89 	bl	80011cc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80012ba:	2301      	movs	r3, #1
 80012bc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80012c0:	2000      	movs	r0, #0
 80012c2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80012c4:	2001      	movs	r0, #1
}
 80012c6:	bd10      	pop	{r4, pc}

080012c8 <HAL_TIM_PWM_Init>:
{
 80012c8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80012ca:	4604      	mov	r4, r0
 80012cc:	b1a0      	cbz	r0, 80012f8 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80012ce:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80012d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80012d6:	b91b      	cbnz	r3, 80012e0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80012d8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 80012dc:	f000 fe10 	bl	8001f00 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 80012e0:	2302      	movs	r3, #2
 80012e2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80012e6:	6820      	ldr	r0, [r4, #0]
 80012e8:	1d21      	adds	r1, r4, #4
 80012ea:	f7ff ff6f 	bl	80011cc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80012ee:	2301      	movs	r3, #1
 80012f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80012f4:	2000      	movs	r0, #0
 80012f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80012f8:	2001      	movs	r0, #1
}  
 80012fa:	bd10      	pop	{r4, pc}

080012fc <HAL_TIM_Encoder_Init>:
{
 80012fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012fe:	460c      	mov	r4, r1
  if(htim == NULL)
 8001300:	4605      	mov	r5, r0
 8001302:	2800      	cmp	r0, #0
 8001304:	d041      	beq.n	800138a <HAL_TIM_Encoder_Init+0x8e>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001306:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800130a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800130e:	b91b      	cbnz	r3, 8001318 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8001310:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Encoder_MspInit(htim);
 8001314:	f000 fd98 	bl	8001e48 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001318:	4629      	mov	r1, r5
  htim->State= HAL_TIM_STATE_BUSY;   
 800131a:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800131c:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State= HAL_TIM_STATE_BUSY;   
 8001320:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001324:	6883      	ldr	r3, [r0, #8]
 8001326:	f023 0307 	bic.w	r3, r3, #7
 800132a:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 800132c:	f7ff ff4e 	bl	80011cc <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8001330:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8001332:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 8001334:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8001336:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001338:	68a1      	ldr	r1, [r4, #8]
  tmpccer = htim->Instance->CCER;
 800133a:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 800133c:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800133e:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001340:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001344:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001348:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 800134c:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800134e:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001352:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001354:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001356:	011b      	lsls	r3, r3, #4
 8001358:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800135c:	68e1      	ldr	r1, [r4, #12]
 800135e:	430b      	orrs	r3, r1
 8001360:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001362:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001366:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800136a:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800136c:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800136e:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001372:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8001374:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001376:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 800137a:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800137c:	4317      	orrs	r7, r2
  htim->State= HAL_TIM_STATE_READY;
 800137e:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 8001380:	6207      	str	r7, [r0, #32]
  htim->State= HAL_TIM_STATE_READY;
 8001382:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  return HAL_OK;
 8001386:	2000      	movs	r0, #0
 8001388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800138a:	2001      	movs	r0, #1
}
 800138c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001390 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001390:	6a03      	ldr	r3, [r0, #32]
 8001392:	f023 0310 	bic.w	r3, r3, #16
 8001396:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001398:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 800139a:	6842      	ldr	r2, [r0, #4]
{
 800139c:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 800139e:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80013a0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80013a2:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80013a6:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80013aa:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80013ac:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80013b0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80013b4:	4c0d      	ldr	r4, [pc, #52]	; (80013ec <TIM_OC2_SetConfig+0x5c>)
 80013b6:	42a0      	cmp	r0, r4
 80013b8:	d009      	beq.n	80013ce <TIM_OC2_SetConfig+0x3e>
 80013ba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80013be:	42a0      	cmp	r0, r4
 80013c0:	d005      	beq.n	80013ce <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 80013c2:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80013c4:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80013c6:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80013c8:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80013ca:	6203      	str	r3, [r0, #32]
}
 80013cc:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80013ce:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80013d0:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 80013d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80013d6:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80013da:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80013dc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80013e0:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80013e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80013e6:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 80013ea:	e7ea      	b.n	80013c2 <TIM_OC2_SetConfig+0x32>
 80013ec:	40010000 	.word	0x40010000

080013f0 <HAL_TIM_PWM_ConfigChannel>:
{
 80013f0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80013f2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80013f6:	2b01      	cmp	r3, #1
{
 80013f8:	4604      	mov	r4, r0
 80013fa:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80013fe:	d025      	beq.n	800144c <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001400:	2301      	movs	r3, #1
 8001402:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8001406:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 800140a:	2a0c      	cmp	r2, #12
 800140c:	d818      	bhi.n	8001440 <HAL_TIM_PWM_ConfigChannel+0x50>
 800140e:	e8df f002 	tbb	[pc, r2]
 8001412:	1707      	.short	0x1707
 8001414:	171e1717 	.word	0x171e1717
 8001418:	172f1717 	.word	0x172f1717
 800141c:	1717      	.short	0x1717
 800141e:	40          	.byte	0x40
 800141f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001420:	6820      	ldr	r0, [r4, #0]
 8001422:	f7ff fe4f 	bl	80010c4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001426:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001428:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800142a:	699a      	ldr	r2, [r3, #24]
 800142c:	f042 0208 	orr.w	r2, r2, #8
 8001430:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001432:	699a      	ldr	r2, [r3, #24]
 8001434:	f022 0204 	bic.w	r2, r2, #4
 8001438:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800143a:	699a      	ldr	r2, [r3, #24]
 800143c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800143e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001440:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001442:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001444:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001448:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 800144c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800144e:	6820      	ldr	r0, [r4, #0]
 8001450:	f7ff ff9e 	bl	8001390 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001454:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001456:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001458:	699a      	ldr	r2, [r3, #24]
 800145a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800145e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001460:	699a      	ldr	r2, [r3, #24]
 8001462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001468:	699a      	ldr	r2, [r3, #24]
 800146a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800146e:	e7e6      	b.n	800143e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001470:	6820      	ldr	r0, [r4, #0]
 8001472:	f7ff fe53 	bl	800111c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001476:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001478:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800147a:	69da      	ldr	r2, [r3, #28]
 800147c:	f042 0208 	orr.w	r2, r2, #8
 8001480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001482:	69da      	ldr	r2, [r3, #28]
 8001484:	f022 0204 	bic.w	r2, r2, #4
 8001488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800148a:	69da      	ldr	r2, [r3, #28]
 800148c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800148e:	61da      	str	r2, [r3, #28]
    break;
 8001490:	e7d6      	b.n	8001440 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001492:	6820      	ldr	r0, [r4, #0]
 8001494:	f7ff fe72 	bl	800117c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001498:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800149a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800149c:	69da      	ldr	r2, [r3, #28]
 800149e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80014a4:	69da      	ldr	r2, [r3, #28]
 80014a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80014ac:	69da      	ldr	r2, [r3, #28]
 80014ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80014b2:	e7ec      	b.n	800148e <HAL_TIM_PWM_ConfigChannel+0x9e>

080014b4 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80014b4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80014b8:	2b01      	cmp	r3, #1
{
 80014ba:	b510      	push	{r4, lr}
 80014bc:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80014c0:	d018      	beq.n	80014f4 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80014c2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80014c6:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80014c8:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80014ca:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80014cc:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80014ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80014d2:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	4322      	orrs	r2, r4
 80014d8:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014e0:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80014e8:	2301      	movs	r3, #1
 80014ea:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80014ee:	2300      	movs	r3, #0
 80014f0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80014f4:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 80014f6:	bd10      	pop	{r4, pc}

080014f8 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80014f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80014fc:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80014fe:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001500:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001502:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001504:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001508:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800150a:	6133      	str	r3, [r6, #16]
{
 800150c:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800150e:	6883      	ldr	r3, [r0, #8]
 8001510:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001512:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001514:	4303      	orrs	r3, r0
 8001516:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001518:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800151c:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800151e:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001522:	430b      	orrs	r3, r1
 8001524:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001526:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001528:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800152a:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800152c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001530:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001532:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001536:	6173      	str	r3, [r6, #20]
 8001538:	4b7a      	ldr	r3, [pc, #488]	; (8001724 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800153a:	d17c      	bne.n	8001636 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800153c:	429e      	cmp	r6, r3
 800153e:	d003      	beq.n	8001548 <UART_SetConfig+0x50>
 8001540:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001544:	429e      	cmp	r6, r3
 8001546:	d144      	bne.n	80015d2 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001548:	f7ff fd6e 	bl	8001028 <HAL_RCC_GetPCLK2Freq>
 800154c:	2519      	movs	r5, #25
 800154e:	fb05 f300 	mul.w	r3, r5, r0
 8001552:	6860      	ldr	r0, [r4, #4]
 8001554:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001558:	0040      	lsls	r0, r0, #1
 800155a:	fbb3 f3f0 	udiv	r3, r3, r0
 800155e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001562:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001566:	f7ff fd5f 	bl	8001028 <HAL_RCC_GetPCLK2Freq>
 800156a:	6863      	ldr	r3, [r4, #4]
 800156c:	4368      	muls	r0, r5
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	fbb0 f7f3 	udiv	r7, r0, r3
 8001574:	f7ff fd58 	bl	8001028 <HAL_RCC_GetPCLK2Freq>
 8001578:	6863      	ldr	r3, [r4, #4]
 800157a:	4368      	muls	r0, r5
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001582:	fbb3 f3f9 	udiv	r3, r3, r9
 8001586:	fb09 7313 	mls	r3, r9, r3, r7
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	3332      	adds	r3, #50	; 0x32
 800158e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001598:	f7ff fd46 	bl	8001028 <HAL_RCC_GetPCLK2Freq>
 800159c:	6862      	ldr	r2, [r4, #4]
 800159e:	4368      	muls	r0, r5
 80015a0:	0052      	lsls	r2, r2, #1
 80015a2:	fbb0 faf2 	udiv	sl, r0, r2
 80015a6:	f7ff fd3f 	bl	8001028 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80015aa:	6863      	ldr	r3, [r4, #4]
 80015ac:	4368      	muls	r0, r5
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80015b4:	fbb3 f3f9 	udiv	r3, r3, r9
 80015b8:	fb09 a313 	mls	r3, r9, r3, sl
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	3332      	adds	r3, #50	; 0x32
 80015c0:	fbb3 f3f9 	udiv	r3, r3, r9
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80015ca:	443b      	add	r3, r7
 80015cc:	60b3      	str	r3, [r6, #8]
 80015ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80015d2:	f7ff fd19 	bl	8001008 <HAL_RCC_GetPCLK1Freq>
 80015d6:	2519      	movs	r5, #25
 80015d8:	fb05 f300 	mul.w	r3, r5, r0
 80015dc:	6860      	ldr	r0, [r4, #4]
 80015de:	f04f 0964 	mov.w	r9, #100	; 0x64
 80015e2:	0040      	lsls	r0, r0, #1
 80015e4:	fbb3 f3f0 	udiv	r3, r3, r0
 80015e8:	fbb3 f3f9 	udiv	r3, r3, r9
 80015ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80015f0:	f7ff fd0a 	bl	8001008 <HAL_RCC_GetPCLK1Freq>
 80015f4:	6863      	ldr	r3, [r4, #4]
 80015f6:	4368      	muls	r0, r5
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	fbb0 f7f3 	udiv	r7, r0, r3
 80015fe:	f7ff fd03 	bl	8001008 <HAL_RCC_GetPCLK1Freq>
 8001602:	6863      	ldr	r3, [r4, #4]
 8001604:	4368      	muls	r0, r5
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	fbb0 f3f3 	udiv	r3, r0, r3
 800160c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001610:	fb09 7313 	mls	r3, r9, r3, r7
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	3332      	adds	r3, #50	; 0x32
 8001618:	fbb3 f3f9 	udiv	r3, r3, r9
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001622:	f7ff fcf1 	bl	8001008 <HAL_RCC_GetPCLK1Freq>
 8001626:	6862      	ldr	r2, [r4, #4]
 8001628:	4368      	muls	r0, r5
 800162a:	0052      	lsls	r2, r2, #1
 800162c:	fbb0 faf2 	udiv	sl, r0, r2
 8001630:	f7ff fcea 	bl	8001008 <HAL_RCC_GetPCLK1Freq>
 8001634:	e7b9      	b.n	80015aa <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001636:	429e      	cmp	r6, r3
 8001638:	d002      	beq.n	8001640 <UART_SetConfig+0x148>
 800163a:	4b3b      	ldr	r3, [pc, #236]	; (8001728 <UART_SetConfig+0x230>)
 800163c:	429e      	cmp	r6, r3
 800163e:	d140      	bne.n	80016c2 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001640:	f7ff fcf2 	bl	8001028 <HAL_RCC_GetPCLK2Freq>
 8001644:	6867      	ldr	r7, [r4, #4]
 8001646:	2519      	movs	r5, #25
 8001648:	f04f 0964 	mov.w	r9, #100	; 0x64
 800164c:	fb05 f300 	mul.w	r3, r5, r0
 8001650:	00bf      	lsls	r7, r7, #2
 8001652:	fbb3 f3f7 	udiv	r3, r3, r7
 8001656:	fbb3 f3f9 	udiv	r3, r3, r9
 800165a:	011f      	lsls	r7, r3, #4
 800165c:	f7ff fce4 	bl	8001028 <HAL_RCC_GetPCLK2Freq>
 8001660:	6863      	ldr	r3, [r4, #4]
 8001662:	4368      	muls	r0, r5
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	fbb0 f8f3 	udiv	r8, r0, r3
 800166a:	f7ff fcdd 	bl	8001028 <HAL_RCC_GetPCLK2Freq>
 800166e:	6863      	ldr	r3, [r4, #4]
 8001670:	4368      	muls	r0, r5
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	fbb0 f3f3 	udiv	r3, r0, r3
 8001678:	fbb3 f3f9 	udiv	r3, r3, r9
 800167c:	fb09 8313 	mls	r3, r9, r3, r8
 8001680:	011b      	lsls	r3, r3, #4
 8001682:	3332      	adds	r3, #50	; 0x32
 8001684:	fbb3 f3f9 	udiv	r3, r3, r9
 8001688:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800168c:	f7ff fccc 	bl	8001028 <HAL_RCC_GetPCLK2Freq>
 8001690:	6862      	ldr	r2, [r4, #4]
 8001692:	4368      	muls	r0, r5
 8001694:	0092      	lsls	r2, r2, #2
 8001696:	fbb0 faf2 	udiv	sl, r0, r2
 800169a:	f7ff fcc5 	bl	8001028 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800169e:	6863      	ldr	r3, [r4, #4]
 80016a0:	4368      	muls	r0, r5
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80016a8:	fbb3 f3f9 	udiv	r3, r3, r9
 80016ac:	fb09 a313 	mls	r3, r9, r3, sl
 80016b0:	011b      	lsls	r3, r3, #4
 80016b2:	3332      	adds	r3, #50	; 0x32
 80016b4:	fbb3 f3f9 	udiv	r3, r3, r9
 80016b8:	f003 030f 	and.w	r3, r3, #15
 80016bc:	ea43 0308 	orr.w	r3, r3, r8
 80016c0:	e783      	b.n	80015ca <UART_SetConfig+0xd2>
 80016c2:	f7ff fca1 	bl	8001008 <HAL_RCC_GetPCLK1Freq>
 80016c6:	6867      	ldr	r7, [r4, #4]
 80016c8:	2519      	movs	r5, #25
 80016ca:	f04f 0964 	mov.w	r9, #100	; 0x64
 80016ce:	fb05 f300 	mul.w	r3, r5, r0
 80016d2:	00bf      	lsls	r7, r7, #2
 80016d4:	fbb3 f3f7 	udiv	r3, r3, r7
 80016d8:	fbb3 f3f9 	udiv	r3, r3, r9
 80016dc:	011f      	lsls	r7, r3, #4
 80016de:	f7ff fc93 	bl	8001008 <HAL_RCC_GetPCLK1Freq>
 80016e2:	6863      	ldr	r3, [r4, #4]
 80016e4:	4368      	muls	r0, r5
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	fbb0 f8f3 	udiv	r8, r0, r3
 80016ec:	f7ff fc8c 	bl	8001008 <HAL_RCC_GetPCLK1Freq>
 80016f0:	6863      	ldr	r3, [r4, #4]
 80016f2:	4368      	muls	r0, r5
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016fa:	fbb3 f3f9 	udiv	r3, r3, r9
 80016fe:	fb09 8313 	mls	r3, r9, r3, r8
 8001702:	011b      	lsls	r3, r3, #4
 8001704:	3332      	adds	r3, #50	; 0x32
 8001706:	fbb3 f3f9 	udiv	r3, r3, r9
 800170a:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800170e:	f7ff fc7b 	bl	8001008 <HAL_RCC_GetPCLK1Freq>
 8001712:	6862      	ldr	r2, [r4, #4]
 8001714:	4368      	muls	r0, r5
 8001716:	0092      	lsls	r2, r2, #2
 8001718:	fbb0 faf2 	udiv	sl, r0, r2
 800171c:	f7ff fc74 	bl	8001008 <HAL_RCC_GetPCLK1Freq>
 8001720:	e7bd      	b.n	800169e <UART_SetConfig+0x1a6>
 8001722:	bf00      	nop
 8001724:	40011000 	.word	0x40011000
 8001728:	40011400 	.word	0x40011400

0800172c <HAL_UART_Init>:
{
 800172c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800172e:	4604      	mov	r4, r0
 8001730:	b340      	cbz	r0, 8001784 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001732:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001736:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800173a:	b91b      	cbnz	r3, 8001744 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800173c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001740:	f000 fcc0 	bl	80020c4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001744:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001746:	2324      	movs	r3, #36	; 0x24
 8001748:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800174c:	68d3      	ldr	r3, [r2, #12]
 800174e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001752:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001754:	4620      	mov	r0, r4
 8001756:	f7ff fecf 	bl	80014f8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800175a:	6823      	ldr	r3, [r4, #0]
 800175c:	691a      	ldr	r2, [r3, #16]
 800175e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001762:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001764:	695a      	ldr	r2, [r3, #20]
 8001766:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800176a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001772:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001774:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001776:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001778:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800177a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800177e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001782:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001784:	2001      	movs	r0, #1
}
 8001786:	bd10      	pop	{r4, pc}

08001788 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001788:	b530      	push	{r4, r5, lr}
 800178a:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 800178c:	2210      	movs	r2, #16
 800178e:	2100      	movs	r1, #0
 8001790:	4668      	mov	r0, sp
 8001792:	f000 fd4b 	bl	800222c <memset>

  /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001796:	4811      	ldr	r0, [pc, #68]	; (80017dc <MX_ADC1_Init+0x54>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001798:	4a11      	ldr	r2, [pc, #68]	; (80017e0 <MX_ADC1_Init+0x58>)
 800179a:	2400      	movs	r4, #0
 800179c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 80017a0:	2501      	movs	r5, #1
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017a2:	e880 001c 	stmia.w	r0, {r2, r3, r4}
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017a6:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <MX_ADC1_Init+0x5c>)
  hadc1.Init.ScanConvMode = DISABLE;
 80017a8:	6104      	str	r4, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017aa:	6184      	str	r4, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017ac:	6204      	str	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017ae:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017b0:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017b2:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017b4:	61c5      	str	r5, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017b6:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017b8:	6145      	str	r5, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017ba:	f7fe fef1 	bl	80005a0 <HAL_ADC_Init>
 80017be:	b108      	cbz	r0, 80017c4 <MX_ADC1_Init+0x3c>
  {
    Error_Handler();
 80017c0:	f000 fa0a 	bl	8001bd8 <Error_Handler>
  /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017c4:	4669      	mov	r1, sp
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <MX_ADC1_Init+0x54>)
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017c8:	9402      	str	r4, [sp, #8]
  sConfig.Rank = 1;
 80017ca:	e88d 0030 	stmia.w	sp, {r4, r5}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ce:	f7fe ff8b 	bl	80006e8 <HAL_ADC_ConfigChannel>
 80017d2:	b108      	cbz	r0, 80017d8 <MX_ADC1_Init+0x50>
  {
    Error_Handler();
 80017d4:	f000 fa00 	bl	8001bd8 <Error_Handler>
  }

}
 80017d8:	b005      	add	sp, #20
 80017da:	bd30      	pop	{r4, r5, pc}
 80017dc:	2000002c 	.word	0x2000002c
 80017e0:	40012000 	.word	0x40012000
 80017e4:	0f000001 	.word	0x0f000001

080017e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80017e8:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ea:	2214      	movs	r2, #20
{
 80017ec:	b08b      	sub	sp, #44	; 0x2c
 80017ee:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	2100      	movs	r1, #0
 80017f2:	eb0d 0002 	add.w	r0, sp, r2
 80017f6:	f000 fd19 	bl	800222c <memset>
  if(adcHandle->Instance==ADC1)
 80017fa:	6822      	ldr	r2, [r4, #0]
 80017fc:	4b23      	ldr	r3, [pc, #140]	; (800188c <HAL_ADC_MspInit+0xa4>)
 80017fe:	429a      	cmp	r2, r3
 8001800:	d141      	bne.n	8001886 <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001802:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001806:	2400      	movs	r4, #0
 8001808:	9401      	str	r4, [sp, #4]
 800180a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180c:	4820      	ldr	r0, [pc, #128]	; (8001890 <HAL_ADC_MspInit+0xa8>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800180e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001812:	645a      	str	r2, [r3, #68]	; 0x44
 8001814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001816:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800181a:	9201      	str	r2, [sp, #4]
 800181c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800181e:	9402      	str	r4, [sp, #8]
 8001820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001822:	f042 0204 	orr.w	r2, r2, #4
 8001826:	631a      	str	r2, [r3, #48]	; 0x30
 8001828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800182a:	f002 0204 	and.w	r2, r2, #4
 800182e:	9202      	str	r2, [sp, #8]
 8001830:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001832:	9403      	str	r4, [sp, #12]
 8001834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001836:	f042 0201 	orr.w	r2, r2, #1
 800183a:	631a      	str	r2, [r3, #48]	; 0x30
 800183c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800183e:	f002 0201 	and.w	r2, r2, #1
 8001842:	9203      	str	r2, [sp, #12]
 8001844:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001846:	9404      	str	r4, [sp, #16]
 8001848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800184a:	f042 0202 	orr.w	r2, r2, #2
 800184e:	631a      	str	r2, [r3, #48]	; 0x30
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001858:	2503      	movs	r5, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800185c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800185e:	233f      	movs	r3, #63	; 0x3f
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001860:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001862:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001864:	f7ff f832 	bl	80008cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001868:	23ff      	movs	r3, #255	; 0xff
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186a:	a905      	add	r1, sp, #20
 800186c:	4809      	ldr	r0, [pc, #36]	; (8001894 <HAL_ADC_MspInit+0xac>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800186e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001870:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001874:	f7ff f82a 	bl	80008cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001878:	a905      	add	r1, sp, #20
 800187a:	4807      	ldr	r0, [pc, #28]	; (8001898 <HAL_ADC_MspInit+0xb0>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800187c:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800187e:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001882:	f7ff f823 	bl	80008cc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001886:	b00b      	add	sp, #44	; 0x2c
 8001888:	bd30      	pop	{r4, r5, pc}
 800188a:	bf00      	nop
 800188c:	40012000 	.word	0x40012000
 8001890:	40020800 	.word	0x40020800
 8001894:	40020000 	.word	0x40020000
 8001898:	40020400 	.word	0x40020400

0800189c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800189c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800189e:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	2214      	movs	r2, #20
 80018a2:	2100      	movs	r1, #0
 80018a4:	a807      	add	r0, sp, #28
 80018a6:	f000 fcc1 	bl	800222c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018aa:	2400      	movs	r4, #0
 80018ac:	4b35      	ldr	r3, [pc, #212]	; (8001984 <MX_GPIO_Init+0xe8>)
 80018ae:	9401      	str	r4, [sp, #4]
 80018b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80018b2:	4f35      	ldr	r7, [pc, #212]	; (8001988 <MX_GPIO_Init+0xec>)
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80018b4:	4d35      	ldr	r5, [pc, #212]	; (800198c <MX_GPIO_Init+0xf0>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018ba:	631a      	str	r2, [r3, #48]	; 0x30
 80018bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018be:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80018c2:	9201      	str	r2, [sp, #4]
 80018c4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c6:	9402      	str	r4, [sp, #8]
 80018c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018ca:	f042 0204 	orr.w	r2, r2, #4
 80018ce:	631a      	str	r2, [r3, #48]	; 0x30
 80018d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018d2:	f002 0204 	and.w	r2, r2, #4
 80018d6:	9202      	str	r2, [sp, #8]
 80018d8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	9403      	str	r4, [sp, #12]
 80018dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018de:	f042 0201 	orr.w	r2, r2, #1
 80018e2:	631a      	str	r2, [r3, #48]	; 0x30
 80018e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018e6:	f002 0201 	and.w	r2, r2, #1
 80018ea:	9203      	str	r2, [sp, #12]
 80018ec:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ee:	9404      	str	r4, [sp, #16]
 80018f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018f2:	f042 0202 	orr.w	r2, r2, #2
 80018f6:	631a      	str	r2, [r3, #48]	; 0x30
 80018f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018fa:	f002 0202 	and.w	r2, r2, #2
 80018fe:	9204      	str	r2, [sp, #16]
 8001900:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001902:	9405      	str	r4, [sp, #20]
 8001904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001906:	f042 0210 	orr.w	r2, r2, #16
 800190a:	631a      	str	r2, [r3, #48]	; 0x30
 800190c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800190e:	f002 0210 	and.w	r2, r2, #16
 8001912:	9205      	str	r2, [sp, #20]
 8001914:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001916:	9406      	str	r4, [sp, #24]
 8001918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800191a:	f042 0208 	orr.w	r2, r2, #8
 800191e:	631a      	str	r2, [r3, #48]	; 0x30
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001928:	4622      	mov	r2, r4
 800192a:	4638      	mov	r0, r7
 800192c:	f64f 71ff 	movw	r1, #65535	; 0xffff
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001930:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001932:	f7ff f8ab 	bl	8000a8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001936:	4622      	mov	r2, r4
 8001938:	4628      	mov	r0, r5
 800193a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800193e:	f7ff f8a5 	bl	8000a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE12 PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001942:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001946:	a907      	add	r1, sp, #28
 8001948:	4811      	ldr	r0, [pc, #68]	; (8001990 <MX_GPIO_Init+0xf4>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800194a:	9307      	str	r3, [sp, #28]
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194c:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800194e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001952:	f7fe ffbb 	bl	80008cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001956:	f64f 73ff 	movw	r3, #65535	; 0xffff
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800195a:	a907      	add	r1, sp, #28
 800195c:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800195e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001960:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001966:	f7fe ffb1 	bl	80008cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800196a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196e:	a907      	add	r1, sp, #28
 8001970:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001972:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001974:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197a:	f7fe ffa7 	bl	80008cc <HAL_GPIO_Init>

}
 800197e:	b00d      	add	sp, #52	; 0x34
 8001980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800
 8001988:	40020c00 	.word	0x40020c00
 800198c:	40020000 	.word	0x40020000
 8001990:	40021000 	.word	0x40021000

08001994 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001994:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8001996:	480c      	ldr	r0, [pc, #48]	; (80019c8 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 100000;
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <MX_I2C1_Init+0x38>)
 800199a:	f8df e034 	ldr.w	lr, [pc, #52]	; 80019d0 <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800199e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 80019a2:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019a6:	2300      	movs	r3, #0
 80019a8:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019aa:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ac:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019ae:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019b0:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019b2:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019b4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019b6:	f7ff f86f 	bl	8000a98 <HAL_I2C_Init>
 80019ba:	b118      	cbz	r0, 80019c4 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 80019bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80019c0:	f000 b90a 	b.w	8001bd8 <Error_Handler>
 80019c4:	bd08      	pop	{r3, pc}
 80019c6:	bf00      	nop
 80019c8:	20000074 	.word	0x20000074
 80019cc:	40005400 	.word	0x40005400
 80019d0:	000186a0 	.word	0x000186a0

080019d4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80019d4:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 80019d6:	480c      	ldr	r0, [pc, #48]	; (8001a08 <MX_I2C2_Init+0x34>)
  hi2c2.Init.ClockSpeed = 100000;
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <MX_I2C2_Init+0x38>)
 80019da:	f8df e034 	ldr.w	lr, [pc, #52]	; 8001a10 <MX_I2C2_Init+0x3c>
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.ClockSpeed = 100000;
 80019e2:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019e6:	2300      	movs	r3, #0
 80019e8:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80019ea:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ec:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019ee:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80019f0:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019f2:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019f4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019f6:	f7ff f84f 	bl	8000a98 <HAL_I2C_Init>
 80019fa:	b118      	cbz	r0, 8001a04 <MX_I2C2_Init+0x30>
  {
    Error_Handler();
  }

}
 80019fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001a00:	f000 b8ea 	b.w	8001bd8 <Error_Handler>
 8001a04:	bd08      	pop	{r3, pc}
 8001a06:	bf00      	nop
 8001a08:	200000c8 	.word	0x200000c8
 8001a0c:	40005800 	.word	0x40005800
 8001a10:	000186a0 	.word	0x000186a0

08001a14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a14:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a16:	2214      	movs	r2, #20
{
 8001a18:	b08b      	sub	sp, #44	; 0x2c
 8001a1a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	eb0d 0002 	add.w	r0, sp, r2
 8001a22:	f000 fc03 	bl	800222c <memset>
  if(i2cHandle->Instance==I2C1)
 8001a26:	6823      	ldr	r3, [r4, #0]
 8001a28:	4a28      	ldr	r2, [pc, #160]	; (8001acc <HAL_I2C_MspInit+0xb8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d125      	bne.n	8001a7a <HAL_I2C_MspInit+0x66>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2e:	4c28      	ldr	r4, [pc, #160]	; (8001ad0 <HAL_I2C_MspInit+0xbc>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a30:	4828      	ldr	r0, [pc, #160]	; (8001ad4 <HAL_I2C_MspInit+0xc0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a32:	2500      	movs	r5, #0
 8001a34:	9501      	str	r5, [sp, #4]
 8001a36:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a38:	f043 0302 	orr.w	r3, r3, #2
 8001a3c:	6323      	str	r3, [r4, #48]	; 0x30
 8001a3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a48:	23c0      	movs	r3, #192	; 0xc0
 8001a4a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a4c:	2312      	movs	r3, #18
 8001a4e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a50:	2301      	movs	r3, #1
 8001a52:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a54:	2303      	movs	r3, #3
 8001a56:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a58:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a5a:	2304      	movs	r3, #4
 8001a5c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5e:	f7fe ff35 	bl	80008cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a62:	9502      	str	r5, [sp, #8]
 8001a64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a6a:	6423      	str	r3, [r4, #64]	; 0x40
 8001a6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a72:	9302      	str	r3, [sp, #8]
 8001a74:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001a76:	b00b      	add	sp, #44	; 0x2c
 8001a78:	bd30      	pop	{r4, r5, pc}
  else if(i2cHandle->Instance==I2C2)
 8001a7a:	4a17      	ldr	r2, [pc, #92]	; (8001ad8 <HAL_I2C_MspInit+0xc4>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d1fa      	bne.n	8001a76 <HAL_I2C_MspInit+0x62>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a80:	4c13      	ldr	r4, [pc, #76]	; (8001ad0 <HAL_I2C_MspInit+0xbc>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a82:	4814      	ldr	r0, [pc, #80]	; (8001ad4 <HAL_I2C_MspInit+0xc0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a84:	2500      	movs	r5, #0
 8001a86:	9503      	str	r5, [sp, #12]
 8001a88:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a8a:	f043 0302 	orr.w	r3, r3, #2
 8001a8e:	6323      	str	r3, [r4, #48]	; 0x30
 8001a90:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	9303      	str	r3, [sp, #12]
 8001a98:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a9e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aa0:	2312      	movs	r3, #18
 8001aa2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aac:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001aae:	2304      	movs	r3, #4
 8001ab0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab2:	f7fe ff0b 	bl	80008cc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ab6:	9504      	str	r5, [sp, #16]
 8001ab8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001aba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001abe:	6423      	str	r3, [r4, #64]	; 0x40
 8001ac0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac6:	9304      	str	r3, [sp, #16]
 8001ac8:	9b04      	ldr	r3, [sp, #16]
}
 8001aca:	e7d4      	b.n	8001a76 <HAL_I2C_MspInit+0x62>
 8001acc:	40005400 	.word	0x40005400
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40020400 	.word	0x40020400
 8001ad8:	40005800 	.word	0x40005800

08001adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001adc:	b530      	push	{r4, r5, lr}
 8001ade:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ae0:	2230      	movs	r2, #48	; 0x30
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	a808      	add	r0, sp, #32
 8001ae6:	f000 fba1 	bl	800222c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aea:	2100      	movs	r1, #0
 8001aec:	2214      	movs	r2, #20
 8001aee:	a803      	add	r0, sp, #12
 8001af0:	f000 fb9c 	bl	800222c <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af4:	2400      	movs	r4, #0
 8001af6:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <SystemClock_Config+0x8c>)
 8001af8:	9401      	str	r4, [sp, #4]
 8001afa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001afc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b00:	641a      	str	r2, [r3, #64]	; 0x40
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b0c:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <SystemClock_Config+0x90>)
 8001b0e:	9402      	str	r4, [sp, #8]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b1e:	9302      	str	r3, [sp, #8]
 8001b20:	9b02      	ldr	r3, [sp, #8]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b22:	2301      	movs	r3, #1
 8001b24:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b2a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b30:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b32:	22a8      	movs	r2, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b34:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b36:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b38:	2304      	movs	r3, #4
 8001b3a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b3c:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b3e:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b40:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b42:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b44:	f7ff f816 	bl	8000b74 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b48:	230f      	movs	r3, #15
 8001b4a:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b4c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b50:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b52:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b58:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b5a:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b5c:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b5e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b60:	f7ff f9b8 	bl	8000ed4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001b64:	b015      	add	sp, #84	; 0x54
 8001b66:	bd30      	pop	{r4, r5, pc}
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40007000 	.word	0x40007000

08001b70 <main>:
{
 8001b70:	b508      	push	{r3, lr}
  HAL_Init();
 8001b72:	f7fe fcd5 	bl	8000520 <HAL_Init>
  SystemClock_Config();
 8001b76:	f7ff ffb1 	bl	8001adc <SystemClock_Config>
  MX_GPIO_Init();
 8001b7a:	f7ff fe8f 	bl	800189c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001b7e:	f7ff fe03 	bl	8001788 <MX_ADC1_Init>
  MX_TIM7_Init();
 8001b82:	f000 f917 	bl	8001db4 <MX_TIM7_Init>
  MX_TIM6_Init();
 8001b86:	f000 f8f7 	bl	8001d78 <MX_TIM6_Init>
  MX_TIM3_Init();
 8001b8a:	f000 fa25 	bl	8001fd8 <MX_TIM3_Init>
  MX_UART4_Init();
 8001b8e:	f000 fa61 	bl	8002054 <MX_UART4_Init>
  MX_TIM8_Init();
 8001b92:	f000 f92d 	bl	8001df0 <MX_TIM8_Init>
  MX_TIM1_Init();
 8001b96:	f000 f8c3 	bl	8001d20 <MX_TIM1_Init>
  MX_SPI2_Init();
 8001b9a:	f000 f81f 	bl	8001bdc <MX_SPI2_Init>
  MX_I2C2_Init();
 8001b9e:	f7ff ff19 	bl	80019d4 <MX_I2C2_Init>
  MX_I2C1_Init();
 8001ba2:	f7ff fef7 	bl	8001994 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001ba6:	f000 fa71 	bl	800208c <MX_USART1_UART_Init>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8001baa:	4c0a      	ldr	r4, [pc, #40]	; (8001bd4 <main+0x64>)
	  HAL_Delay(500);
 8001bac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bb0:	f7fe fce2 	bl	8000578 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4620      	mov	r0, r4
 8001bba:	f7fe ff67 	bl	8000a8c <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8001bbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bc2:	f7fe fcd9 	bl	8000578 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2101      	movs	r1, #1
 8001bca:	4620      	mov	r0, r4
 8001bcc:	f7fe ff5e 	bl	8000a8c <HAL_GPIO_WritePin>
 8001bd0:	e7ec      	b.n	8001bac <main+0x3c>
 8001bd2:	bf00      	nop
 8001bd4:	40020c00 	.word	0x40020c00

08001bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd8:	4770      	bx	lr
	...

08001bdc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001bdc:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 8001bde:	480d      	ldr	r0, [pc, #52]	; (8001c14 <MX_SPI2_Init+0x38>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001be0:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <MX_SPI2_Init+0x3c>)
 8001be2:	f44f 7e82 	mov.w	lr, #260	; 0x104
 8001be6:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001bea:	2300      	movs	r3, #0
 8001bec:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bee:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bf0:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bf2:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001bf4:	6183      	str	r3, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bf6:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bf8:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bfa:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bfc:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001bfe:	230a      	movs	r3, #10
 8001c00:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c02:	f7ff fa21 	bl	8001048 <HAL_SPI_Init>
 8001c06:	b118      	cbz	r0, 8001c10 <MX_SPI2_Init+0x34>
  {
    Error_Handler();
  }

}
 8001c08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001c0c:	f7ff bfe4 	b.w	8001bd8 <Error_Handler>
 8001c10:	bd08      	pop	{r3, pc}
 8001c12:	bf00      	nop
 8001c14:	2000011c 	.word	0x2000011c
 8001c18:	40003800 	.word	0x40003800

08001c1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c1c:	b510      	push	{r4, lr}
 8001c1e:	4604      	mov	r4, r0
 8001c20:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c22:	2214      	movs	r2, #20
 8001c24:	2100      	movs	r1, #0
 8001c26:	a803      	add	r0, sp, #12
 8001c28:	f000 fb00 	bl	800222c <memset>
  if(spiHandle->Instance==SPI2)
 8001c2c:	6822      	ldr	r2, [r4, #0]
 8001c2e:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <HAL_SPI_MspInit+0x64>)
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d123      	bne.n	8001c7c <HAL_SPI_MspInit+0x60>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c34:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001c38:	2100      	movs	r1, #0
 8001c3a:	9101      	str	r1, [sp, #4]
 8001c3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3e:	4811      	ldr	r0, [pc, #68]	; (8001c84 <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c44:	641a      	str	r2, [r3, #64]	; 0x40
 8001c46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c48:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001c4c:	9201      	str	r2, [sp, #4]
 8001c4e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c50:	9102      	str	r1, [sp, #8]
 8001c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c54:	f042 0202 	orr.w	r2, r2, #2
 8001c58:	631a      	str	r2, [r3, #48]	; 0x30
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	9302      	str	r3, [sp, #8]
 8001c62:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001c64:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001c68:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c72:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c74:	2305      	movs	r3, #5
 8001c76:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c78:	f7fe fe28 	bl	80008cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001c7c:	b008      	add	sp, #32
 8001c7e:	bd10      	pop	{r4, pc}
 8001c80:	40003800 	.word	0x40003800
 8001c84:	40020400 	.word	0x40020400

08001c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c88:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <HAL_MspInit+0x34>)
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	9100      	str	r1, [sp, #0]
 8001c90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c96:	645a      	str	r2, [r3, #68]	; 0x44
 8001c98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c9a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001c9e:	9200      	str	r2, [sp, #0]
 8001ca0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca2:	9101      	str	r1, [sp, #4]
 8001ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ca6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001caa:	641a      	str	r2, [r3, #64]	; 0x40
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	9301      	str	r3, [sp, #4]
 8001cb4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb6:	b002      	add	sp, #8
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40023800 	.word	0x40023800

08001cc0 <NMI_Handler>:
 8001cc0:	4770      	bx	lr

08001cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc2:	e7fe      	b.n	8001cc2 <HardFault_Handler>

08001cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc4:	e7fe      	b.n	8001cc4 <MemManage_Handler>

08001cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc6:	e7fe      	b.n	8001cc6 <BusFault_Handler>

08001cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc8:	e7fe      	b.n	8001cc8 <UsageFault_Handler>

08001cca <SVC_Handler>:
 8001cca:	4770      	bx	lr

08001ccc <DebugMon_Handler>:
 8001ccc:	4770      	bx	lr

08001cce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cce:	4770      	bx	lr

08001cd0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd0:	f7fe bc40 	b.w	8000554 <HAL_IncTick>

08001cd4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cd4:	490f      	ldr	r1, [pc, #60]	; (8001d14 <SystemInit+0x40>)
 8001cd6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001cda:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <SystemInit+0x44>)
 8001ce4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ce6:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001ce8:	f042 0201 	orr.w	r2, r2, #1
 8001cec:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001cee:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001cf6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001cfa:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001cfc:	4a07      	ldr	r2, [pc, #28]	; (8001d1c <SystemInit+0x48>)
 8001cfe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d06:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001d08:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001d0e:	608b      	str	r3, [r1, #8]
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000ed00 	.word	0xe000ed00
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	24003010 	.word	0x24003010

08001d20 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d20:	b510      	push	{r4, lr}
 8001d22:	b08c      	sub	sp, #48	; 0x30
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d24:	2100      	movs	r1, #0
 8001d26:	2224      	movs	r2, #36	; 0x24
 8001d28:	a803      	add	r0, sp, #12
 8001d2a:	f000 fa7f 	bl	800222c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim1.Instance = TIM1;
 8001d2e:	4810      	ldr	r0, [pc, #64]	; (8001d70 <MX_TIM1_Init+0x50>)
 8001d30:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <MX_TIM1_Init+0x54>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d32:	2400      	movs	r4, #0
  htim1.Init.Prescaler = 0;
 8001d34:	e880 0018 	stmia.w	r0, {r3, r4}
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001d38:	a903      	add	r1, sp, #12
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d3a:	2301      	movs	r3, #1
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3c:	9401      	str	r4, [sp, #4]
 8001d3e:	9402      	str	r4, [sp, #8]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d40:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 0;
 8001d42:	60c4      	str	r4, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d44:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d46:	6144      	str	r4, [r0, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d48:	9303      	str	r3, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d4a:	9305      	str	r3, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d4c:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001d4e:	f7ff fad5 	bl	80012fc <HAL_TIM_Encoder_Init>
 8001d52:	b108      	cbz	r0, 8001d58 <MX_TIM1_Init+0x38>
  {
    Error_Handler();
 8001d54:	f7ff ff40 	bl	8001bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d58:	a901      	add	r1, sp, #4
 8001d5a:	4805      	ldr	r0, [pc, #20]	; (8001d70 <MX_TIM1_Init+0x50>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d5c:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d5e:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d60:	f7ff fba8 	bl	80014b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d64:	b108      	cbz	r0, 8001d6a <MX_TIM1_Init+0x4a>
  {
    Error_Handler();
 8001d66:	f7ff ff37 	bl	8001bd8 <Error_Handler>
  }

}
 8001d6a:	b00c      	add	sp, #48	; 0x30
 8001d6c:	bd10      	pop	{r4, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000228 	.word	0x20000228
 8001d74:	40010000 	.word	0x40010000

08001d78 <MX_TIM6_Init>:
  HAL_TIM_MspPostInit(&htim3);

}
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001d78:	b513      	push	{r0, r1, r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim6.Instance = TIM6;
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <MX_TIM6_Init+0x34>)
 8001d7c:	480c      	ldr	r0, [pc, #48]	; (8001db0 <MX_TIM6_Init+0x38>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d7e:	2400      	movs	r4, #0
 8001d80:	9400      	str	r4, [sp, #0]
 8001d82:	9401      	str	r4, [sp, #4]
  htim6.Init.Prescaler = 0;
 8001d84:	e880 0018 	stmia.w	r0, {r3, r4}
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d88:	6084      	str	r4, [r0, #8]
  htim6.Init.Period = 0;
 8001d8a:	60c4      	str	r4, [r0, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d8c:	f7ff fa82 	bl	8001294 <HAL_TIM_Base_Init>
 8001d90:	b108      	cbz	r0, 8001d96 <MX_TIM6_Init+0x1e>
  {
    Error_Handler();
 8001d92:	f7ff ff21 	bl	8001bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d96:	4669      	mov	r1, sp
 8001d98:	4805      	ldr	r0, [pc, #20]	; (8001db0 <MX_TIM6_Init+0x38>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d9a:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9c:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d9e:	f7ff fb89 	bl	80014b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001da2:	b108      	cbz	r0, 8001da8 <MX_TIM6_Init+0x30>
  {
    Error_Handler();
 8001da4:	f7ff ff18 	bl	8001bd8 <Error_Handler>
  }

}
 8001da8:	b002      	add	sp, #8
 8001daa:	bd10      	pop	{r4, pc}
 8001dac:	40001000 	.word	0x40001000
 8001db0:	200001ec 	.word	0x200001ec

08001db4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001db4:	b513      	push	{r0, r1, r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim7.Instance = TIM7;
 8001db6:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <MX_TIM7_Init+0x34>)
 8001db8:	480c      	ldr	r0, [pc, #48]	; (8001dec <MX_TIM7_Init+0x38>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dba:	2400      	movs	r4, #0
 8001dbc:	9400      	str	r4, [sp, #0]
 8001dbe:	9401      	str	r4, [sp, #4]
  htim7.Init.Prescaler = 0;
 8001dc0:	e880 0018 	stmia.w	r0, {r3, r4}
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc4:	6084      	str	r4, [r0, #8]
  htim7.Init.Period = 0;
 8001dc6:	60c4      	str	r4, [r0, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001dc8:	f7ff fa64 	bl	8001294 <HAL_TIM_Base_Init>
 8001dcc:	b108      	cbz	r0, 8001dd2 <MX_TIM7_Init+0x1e>
  {
    Error_Handler();
 8001dce:	f7ff ff03 	bl	8001bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001dd2:	4669      	mov	r1, sp
 8001dd4:	4805      	ldr	r0, [pc, #20]	; (8001dec <MX_TIM7_Init+0x38>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd6:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd8:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001dda:	f7ff fb6b 	bl	80014b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001dde:	b108      	cbz	r0, 8001de4 <MX_TIM7_Init+0x30>
  {
    Error_Handler();
 8001de0:	f7ff fefa 	bl	8001bd8 <Error_Handler>
  }

}
 8001de4:	b002      	add	sp, #8
 8001de6:	bd10      	pop	{r4, pc}
 8001de8:	40001400 	.word	0x40001400
 8001dec:	20000264 	.word	0x20000264

08001df0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001df0:	b510      	push	{r4, lr}
 8001df2:	b08c      	sub	sp, #48	; 0x30
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001df4:	2100      	movs	r1, #0
 8001df6:	2224      	movs	r2, #36	; 0x24
 8001df8:	a803      	add	r0, sp, #12
 8001dfa:	f000 fa17 	bl	800222c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim8.Instance = TIM8;
 8001dfe:	4810      	ldr	r0, [pc, #64]	; (8001e40 <MX_TIM8_Init+0x50>)
 8001e00:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <MX_TIM8_Init+0x54>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e02:	2400      	movs	r4, #0
  htim8.Init.Prescaler = 0;
 8001e04:	e880 0018 	stmia.w	r0, {r3, r4}
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001e08:	a903      	add	r1, sp, #12
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001e0a:	2301      	movs	r3, #1
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e0c:	9401      	str	r4, [sp, #4]
 8001e0e:	9402      	str	r4, [sp, #8]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e10:	6084      	str	r4, [r0, #8]
  htim8.Init.Period = 0;
 8001e12:	60c4      	str	r4, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e14:	6104      	str	r4, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 8001e16:	6144      	str	r4, [r0, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001e18:	9303      	str	r3, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e1a:	9305      	str	r3, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e1c:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001e1e:	f7ff fa6d 	bl	80012fc <HAL_TIM_Encoder_Init>
 8001e22:	b108      	cbz	r0, 8001e28 <MX_TIM8_Init+0x38>
  {
    Error_Handler();
 8001e24:	f7ff fed8 	bl	8001bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e28:	a901      	add	r1, sp, #4
 8001e2a:	4805      	ldr	r0, [pc, #20]	; (8001e40 <MX_TIM8_Init+0x50>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e2c:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e2e:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e30:	f7ff fb40 	bl	80014b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e34:	b108      	cbz	r0, 8001e3a <MX_TIM8_Init+0x4a>
  {
    Error_Handler();
 8001e36:	f7ff fecf 	bl	8001bd8 <Error_Handler>
  }

}
 8001e3a:	b00c      	add	sp, #48	; 0x30
 8001e3c:	bd10      	pop	{r4, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000174 	.word	0x20000174
 8001e44:	40010400 	.word	0x40010400

08001e48 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001e48:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4a:	2214      	movs	r2, #20
{
 8001e4c:	b08a      	sub	sp, #40	; 0x28
 8001e4e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	2100      	movs	r1, #0
 8001e52:	eb0d 0002 	add.w	r0, sp, r2
 8001e56:	f000 f9e9 	bl	800222c <memset>
  if(tim_encoderHandle->Instance==TIM1)
 8001e5a:	6823      	ldr	r3, [r4, #0]
 8001e5c:	4a23      	ldr	r2, [pc, #140]	; (8001eec <HAL_TIM_Encoder_MspInit+0xa4>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d122      	bne.n	8001ea8 <HAL_TIM_Encoder_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e62:	4b23      	ldr	r3, [pc, #140]	; (8001ef0 <HAL_TIM_Encoder_MspInit+0xa8>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e64:	4823      	ldr	r0, [pc, #140]	; (8001ef4 <HAL_TIM_Encoder_MspInit+0xac>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e66:	2100      	movs	r1, #0
 8001e68:	9101      	str	r1, [sp, #4]
 8001e6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e6c:	f042 0201 	orr.w	r2, r2, #1
 8001e70:	645a      	str	r2, [r3, #68]	; 0x44
 8001e72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e74:	f002 0201 	and.w	r2, r2, #1
 8001e78:	9201      	str	r2, [sp, #4]
 8001e7a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e7c:	9102      	str	r1, [sp, #8]
 8001e7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e80:	f042 0210 	orr.w	r2, r2, #16
 8001e84:	631a      	str	r2, [r3, #48]	; 0x30
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e88:	f003 0310 	and.w	r3, r3, #16
 8001e8c:	9302      	str	r3, [sp, #8]
 8001e8e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001e90:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001e94:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	2302      	movs	r3, #2
 8001e98:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e9e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea0:	f7fe fd14 	bl	80008cc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001ea4:	b00a      	add	sp, #40	; 0x28
 8001ea6:	bd10      	pop	{r4, pc}
  else if(tim_encoderHandle->Instance==TIM8)
 8001ea8:	4a13      	ldr	r2, [pc, #76]	; (8001ef8 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d1fa      	bne.n	8001ea4 <HAL_TIM_Encoder_MspInit+0x5c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <HAL_TIM_Encoder_MspInit+0xa8>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb0:	4812      	ldr	r0, [pc, #72]	; (8001efc <HAL_TIM_Encoder_MspInit+0xb4>)
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	9103      	str	r1, [sp, #12]
 8001eb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001eb8:	f042 0202 	orr.w	r2, r2, #2
 8001ebc:	645a      	str	r2, [r3, #68]	; 0x44
 8001ebe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ec0:	f002 0202 	and.w	r2, r2, #2
 8001ec4:	9203      	str	r2, [sp, #12]
 8001ec6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec8:	9104      	str	r1, [sp, #16]
 8001eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ecc:	f042 0204 	orr.w	r2, r2, #4
 8001ed0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	9304      	str	r3, [sp, #16]
 8001eda:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001edc:	23c0      	movs	r3, #192	; 0xc0
 8001ede:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee8:	a905      	add	r1, sp, #20
 8001eea:	e7d9      	b.n	8001ea0 <HAL_TIM_Encoder_MspInit+0x58>
 8001eec:	40010000 	.word	0x40010000
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40010400 	.word	0x40010400
 8001efc:	40020800 	.word	0x40020800

08001f00 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM3)
 8001f00:	6802      	ldr	r2, [r0, #0]
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <HAL_TIM_PWM_MspInit+0x28>)
 8001f04:	429a      	cmp	r2, r3
{
 8001f06:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM3)
 8001f08:	d10b      	bne.n	8001f22 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	9301      	str	r3, [sp, #4]
 8001f0e:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <HAL_TIM_PWM_MspInit+0x2c>)
 8001f10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f12:	f042 0202 	orr.w	r2, r2, #2
 8001f16:	641a      	str	r2, [r3, #64]	; 0x40
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	9301      	str	r3, [sp, #4]
 8001f20:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001f22:	b002      	add	sp, #8
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40000400 	.word	0x40000400
 8001f2c:	40023800 	.word	0x40023800

08001f30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM6)
 8001f30:	6803      	ldr	r3, [r0, #0]
 8001f32:	4a11      	ldr	r2, [pc, #68]	; (8001f78 <HAL_TIM_Base_MspInit+0x48>)
 8001f34:	4293      	cmp	r3, r2
{
 8001f36:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM6)
 8001f38:	d10d      	bne.n	8001f56 <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <HAL_TIM_Base_MspInit+0x4c>)
 8001f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f42:	f042 0210 	orr.w	r2, r2, #16
 8001f46:	641a      	str	r2, [r3, #64]	; 0x40
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001f52:	b002      	add	sp, #8
 8001f54:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM7)
 8001f56:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <HAL_TIM_Base_MspInit+0x50>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d1fa      	bne.n	8001f52 <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	9301      	str	r3, [sp, #4]
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_TIM_Base_MspInit+0x4c>)
 8001f62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f64:	f042 0220 	orr.w	r2, r2, #32
 8001f68:	641a      	str	r2, [r3, #64]	; 0x40
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	f003 0320 	and.w	r3, r3, #32
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	9b01      	ldr	r3, [sp, #4]
}
 8001f74:	e7ed      	b.n	8001f52 <HAL_TIM_Base_MspInit+0x22>
 8001f76:	bf00      	nop
 8001f78:	40001000 	.word	0x40001000
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40001400 	.word	0x40001400

08001f84 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f84:	b510      	push	{r4, lr}
 8001f86:	4604      	mov	r4, r0
 8001f88:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8a:	2214      	movs	r2, #20
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	a801      	add	r0, sp, #4
 8001f90:	f000 f94c 	bl	800222c <memset>
  if(timHandle->Instance==TIM3)
 8001f94:	6822      	ldr	r2, [r4, #0]
 8001f96:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <HAL_TIM_MspPostInit+0x48>)
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d114      	bne.n	8001fc6 <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_TIM_MspPostInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa2:	480c      	ldr	r0, [pc, #48]	; (8001fd4 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fa6:	f042 0202 	orr.w	r2, r2, #2
 8001faa:	631a      	str	r2, [r3, #48]	; 0x30
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001fb6:	2330      	movs	r3, #48	; 0x30
 8001fb8:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fba:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fc0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc2:	f7fe fc83 	bl	80008cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001fc6:	b006      	add	sp, #24
 8001fc8:	bd10      	pop	{r4, pc}
 8001fca:	bf00      	nop
 8001fcc:	40000400 	.word	0x40000400
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40020400 	.word	0x40020400

08001fd8 <MX_TIM3_Init>:
{
 8001fd8:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fda:	2400      	movs	r4, #0
{
 8001fdc:	b08a      	sub	sp, #40	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fde:	221c      	movs	r2, #28
 8001fe0:	4621      	mov	r1, r4
 8001fe2:	a803      	add	r0, sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe4:	9401      	str	r4, [sp, #4]
 8001fe6:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fe8:	f000 f920 	bl	800222c <memset>
  htim3.Instance = TIM3;
 8001fec:	4817      	ldr	r0, [pc, #92]	; (800204c <MX_TIM3_Init+0x74>)
 8001fee:	4b18      	ldr	r3, [pc, #96]	; (8002050 <MX_TIM3_Init+0x78>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff0:	6084      	str	r4, [r0, #8]
  htim3.Init.Prescaler = 0;
 8001ff2:	e880 0018 	stmia.w	r0, {r3, r4}
  htim3.Init.Period = 0;
 8001ff6:	60c4      	str	r4, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff8:	6104      	str	r4, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ffa:	f7ff f965 	bl	80012c8 <HAL_TIM_PWM_Init>
 8001ffe:	b108      	cbz	r0, 8002004 <MX_TIM3_Init+0x2c>
    Error_Handler();
 8002000:	f7ff fdea 	bl	8001bd8 <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002004:	a901      	add	r1, sp, #4
 8002006:	4811      	ldr	r0, [pc, #68]	; (800204c <MX_TIM3_Init+0x74>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002008:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800200a:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800200c:	f7ff fa52 	bl	80014b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002010:	b108      	cbz	r0, 8002016 <MX_TIM3_Init+0x3e>
    Error_Handler();
 8002012:	f7ff fde1 	bl	8001bd8 <Error_Handler>
  sConfigOC.Pulse = 0;
 8002016:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002018:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800201a:	a903      	add	r1, sp, #12
 800201c:	480b      	ldr	r0, [pc, #44]	; (800204c <MX_TIM3_Init+0x74>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800201e:	9303      	str	r3, [sp, #12]
  sConfigOC.Pulse = 0;
 8002020:	9204      	str	r2, [sp, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002022:	9205      	str	r2, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002024:	9207      	str	r2, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002026:	f7ff f9e3 	bl	80013f0 <HAL_TIM_PWM_ConfigChannel>
 800202a:	b108      	cbz	r0, 8002030 <MX_TIM3_Init+0x58>
    Error_Handler();
 800202c:	f7ff fdd4 	bl	8001bd8 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002030:	2204      	movs	r2, #4
 8002032:	a903      	add	r1, sp, #12
 8002034:	4805      	ldr	r0, [pc, #20]	; (800204c <MX_TIM3_Init+0x74>)
 8002036:	f7ff f9db 	bl	80013f0 <HAL_TIM_PWM_ConfigChannel>
 800203a:	b108      	cbz	r0, 8002040 <MX_TIM3_Init+0x68>
    Error_Handler();
 800203c:	f7ff fdcc 	bl	8001bd8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8002040:	4802      	ldr	r0, [pc, #8]	; (800204c <MX_TIM3_Init+0x74>)
 8002042:	f7ff ff9f 	bl	8001f84 <HAL_TIM_MspPostInit>
}
 8002046:	b00a      	add	sp, #40	; 0x28
 8002048:	bd10      	pop	{r4, pc}
 800204a:	bf00      	nop
 800204c:	200001b0 	.word	0x200001b0
 8002050:	40000400 	.word	0x40000400

08002054 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002054:	b508      	push	{r3, lr}

  huart4.Instance = UART4;
 8002056:	480b      	ldr	r0, [pc, #44]	; (8002084 <MX_UART4_Init+0x30>)
  huart4.Init.BaudRate = 115200;
 8002058:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <MX_UART4_Init+0x34>)
 800205a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800205e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002062:	220c      	movs	r2, #12
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002064:	2300      	movs	r3, #0
 8002066:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002068:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800206a:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800206c:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800206e:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002070:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002072:	f7ff fb5b 	bl	800172c <HAL_UART_Init>
 8002076:	b118      	cbz	r0, 8002080 <MX_UART4_Init+0x2c>
  {
    Error_Handler();
  }

}
 8002078:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800207c:	f7ff bdac 	b.w	8001bd8 <Error_Handler>
 8002080:	bd08      	pop	{r3, pc}
 8002082:	bf00      	nop
 8002084:	200002e0 	.word	0x200002e0
 8002088:	40004c00 	.word	0x40004c00

0800208c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800208c:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 800208e:	480b      	ldr	r0, [pc, #44]	; (80020bc <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8002090:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <MX_USART1_UART_Init+0x34>)
 8002092:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8002096:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800209a:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800209c:	2300      	movs	r3, #0
 800209e:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020a0:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020a2:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020a4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020a6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020aa:	f7ff fb3f 	bl	800172c <HAL_UART_Init>
 80020ae:	b118      	cbz	r0, 80020b8 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 80020b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80020b4:	f7ff bd90 	b.w	8001bd8 <Error_Handler>
 80020b8:	bd08      	pop	{r3, pc}
 80020ba:	bf00      	nop
 80020bc:	200002a0 	.word	0x200002a0
 80020c0:	40011000 	.word	0x40011000

080020c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020c4:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c6:	2214      	movs	r2, #20
{
 80020c8:	b08a      	sub	sp, #40	; 0x28
 80020ca:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020cc:	2100      	movs	r1, #0
 80020ce:	eb0d 0002 	add.w	r0, sp, r2
 80020d2:	f000 f8ab 	bl	800222c <memset>
  if(uartHandle->Instance==UART4)
 80020d6:	6823      	ldr	r3, [r4, #0]
 80020d8:	4a28      	ldr	r2, [pc, #160]	; (800217c <HAL_UART_MspInit+0xb8>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d126      	bne.n	800212c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80020de:	4b28      	ldr	r3, [pc, #160]	; (8002180 <HAL_UART_MspInit+0xbc>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e0:	4828      	ldr	r0, [pc, #160]	; (8002184 <HAL_UART_MspInit+0xc0>)
    __HAL_RCC_UART4_CLK_ENABLE();
 80020e2:	2100      	movs	r1, #0
 80020e4:	9101      	str	r1, [sp, #4]
 80020e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020e8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80020ec:	641a      	str	r2, [r3, #64]	; 0x40
 80020ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020f0:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80020f4:	9201      	str	r2, [sp, #4]
 80020f6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f8:	9102      	str	r1, [sp, #8]
 80020fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020fc:	f042 0204 	orr.w	r2, r2, #4
 8002100:	631a      	str	r2, [r3, #48]	; 0x30
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	9302      	str	r3, [sp, #8]
 800210a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800210c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002110:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002112:	2302      	movs	r3, #2
 8002114:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002116:	2301      	movs	r3, #1
 8002118:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211a:	2303      	movs	r3, #3
 800211c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800211e:	2308      	movs	r3, #8
 8002120:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002122:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002124:	f7fe fbd2 	bl	80008cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002128:	b00a      	add	sp, #40	; 0x28
 800212a:	bd10      	pop	{r4, pc}
  else if(uartHandle->Instance==USART1)
 800212c:	4a16      	ldr	r2, [pc, #88]	; (8002188 <HAL_UART_MspInit+0xc4>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d1fa      	bne.n	8002128 <HAL_UART_MspInit+0x64>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002132:	4b13      	ldr	r3, [pc, #76]	; (8002180 <HAL_UART_MspInit+0xbc>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002134:	4815      	ldr	r0, [pc, #84]	; (800218c <HAL_UART_MspInit+0xc8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002136:	2100      	movs	r1, #0
 8002138:	9103      	str	r1, [sp, #12]
 800213a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800213c:	f042 0210 	orr.w	r2, r2, #16
 8002140:	645a      	str	r2, [r3, #68]	; 0x44
 8002142:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002144:	f002 0210 	and.w	r2, r2, #16
 8002148:	9203      	str	r2, [sp, #12]
 800214a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214c:	9104      	str	r1, [sp, #16]
 800214e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002150:	f042 0201 	orr.w	r2, r2, #1
 8002154:	631a      	str	r2, [r3, #48]	; 0x30
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	9304      	str	r3, [sp, #16]
 800215e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002160:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002164:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800216a:	2301      	movs	r3, #1
 800216c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216e:	2303      	movs	r3, #3
 8002170:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002172:	2307      	movs	r3, #7
 8002174:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002176:	a905      	add	r1, sp, #20
 8002178:	e7d4      	b.n	8002124 <HAL_UART_MspInit+0x60>
 800217a:	bf00      	nop
 800217c:	40004c00 	.word	0x40004c00
 8002180:	40023800 	.word	0x40023800
 8002184:	40020800 	.word	0x40020800
 8002188:	40011000 	.word	0x40011000
 800218c:	40020000 	.word	0x40020000

08002190 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002190:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002194:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002196:	e003      	b.n	80021a0 <LoopCopyDataInit>

08002198 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002198:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800219a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800219c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800219e:	3104      	adds	r1, #4

080021a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80021a0:	480b      	ldr	r0, [pc, #44]	; (80021d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80021a2:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80021a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80021a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80021a8:	d3f6      	bcc.n	8002198 <CopyDataInit>
  ldr  r2, =_sbss
 80021aa:	4a0b      	ldr	r2, [pc, #44]	; (80021d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80021ac:	e002      	b.n	80021b4 <LoopFillZerobss>

080021ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80021ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80021b0:	f842 3b04 	str.w	r3, [r2], #4

080021b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80021b4:	4b09      	ldr	r3, [pc, #36]	; (80021dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80021b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80021b8:	d3f9      	bcc.n	80021ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021ba:	f7ff fd8b 	bl	8001cd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021be:	f000 f811 	bl	80021e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021c2:	f7ff fcd5 	bl	8001b70 <main>
  bx  lr    
 80021c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021c8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80021cc:	0800227c 	.word	0x0800227c
  ldr  r0, =_sdata
 80021d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80021d4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80021d8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80021dc:	20000320 	.word	0x20000320

080021e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021e0:	e7fe      	b.n	80021e0 <ADC_IRQHandler>
	...

080021e4 <__libc_init_array>:
 80021e4:	b570      	push	{r4, r5, r6, lr}
 80021e6:	4e0d      	ldr	r6, [pc, #52]	; (800221c <__libc_init_array+0x38>)
 80021e8:	4c0d      	ldr	r4, [pc, #52]	; (8002220 <__libc_init_array+0x3c>)
 80021ea:	1ba4      	subs	r4, r4, r6
 80021ec:	10a4      	asrs	r4, r4, #2
 80021ee:	2500      	movs	r5, #0
 80021f0:	42a5      	cmp	r5, r4
 80021f2:	d109      	bne.n	8002208 <__libc_init_array+0x24>
 80021f4:	4e0b      	ldr	r6, [pc, #44]	; (8002224 <__libc_init_array+0x40>)
 80021f6:	4c0c      	ldr	r4, [pc, #48]	; (8002228 <__libc_init_array+0x44>)
 80021f8:	f000 f820 	bl	800223c <_init>
 80021fc:	1ba4      	subs	r4, r4, r6
 80021fe:	10a4      	asrs	r4, r4, #2
 8002200:	2500      	movs	r5, #0
 8002202:	42a5      	cmp	r5, r4
 8002204:	d105      	bne.n	8002212 <__libc_init_array+0x2e>
 8002206:	bd70      	pop	{r4, r5, r6, pc}
 8002208:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800220c:	4798      	blx	r3
 800220e:	3501      	adds	r5, #1
 8002210:	e7ee      	b.n	80021f0 <__libc_init_array+0xc>
 8002212:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002216:	4798      	blx	r3
 8002218:	3501      	adds	r5, #1
 800221a:	e7f2      	b.n	8002202 <__libc_init_array+0x1e>
 800221c:	08002274 	.word	0x08002274
 8002220:	08002274 	.word	0x08002274
 8002224:	08002274 	.word	0x08002274
 8002228:	08002278 	.word	0x08002278

0800222c <memset>:
 800222c:	4402      	add	r2, r0
 800222e:	4603      	mov	r3, r0
 8002230:	4293      	cmp	r3, r2
 8002232:	d100      	bne.n	8002236 <memset+0xa>
 8002234:	4770      	bx	lr
 8002236:	f803 1b01 	strb.w	r1, [r3], #1
 800223a:	e7f9      	b.n	8002230 <memset+0x4>

0800223c <_init>:
 800223c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800223e:	bf00      	nop
 8002240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002242:	bc08      	pop	{r3}
 8002244:	469e      	mov	lr, r3
 8002246:	4770      	bx	lr

08002248 <_fini>:
 8002248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800224a:	bf00      	nop
 800224c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800224e:	bc08      	pop	{r3}
 8002250:	469e      	mov	lr, r3
 8002252:	4770      	bx	lr
